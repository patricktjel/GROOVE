/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.parser;

import de.tuberlin.cs.cis.ocl.parser.lexer.*;
import de.tuberlin.cs.cis.ocl.parser.node.*;
import de.tuberlin.cs.cis.ocl.parser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        POclFile node1 = (POclFile) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAoclfile1OclFile */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAoclfile2OclFile */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AConstraint */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAdefinitioncontextbodypart1ContextBodypart */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAdefinitioncontextbodypart2ContextBodypart */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAdefinitioncontextbodypart3ContextBodypart */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAdefinitioncontextbodypart4ContextBodypart */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AAconstraintcontextbodypart1ContextBodypart */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AAconstraintcontextbodypart2ContextBodypart */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce AContextDeclaration */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AAoperationcontextkind1ContextKind */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AAoperationcontextkind2ContextKind */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AAclassifiercontextkind1ContextKind */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list, false);
            }
            break;
            case 13: /* reduce AAclassifiercontextkind2ContextKind */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce AReturnType */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce AClassifierType */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce APreConditionStereotype */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce APostConditionStereotype */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce AInvariantStereotype */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list, false);
            }
            break;
            case 19: /* reduce AContextOperationName */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce ALogicalContextOperationName */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce ARelationalContextOperationName */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce AAddContextOperationName */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AMultiplyContextOperationName */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce AAformalparameterlist1FormalParameterList */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list, false);
            }
            break;
            case 25: /* reduce AAformalparameterlist2FormalParameterList */
            {
                ArrayList<Object> list = new25();
                push(goTo(9), list, false);
            }
            break;
            case 26: /* reduce AAparamlist1ParamList */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list, false);
            }
            break;
            case 27: /* reduce AAparamlist2ParamList */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list, false);
            }
            break;
            case 28: /* reduce AFormalParameter */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list, false);
            }
            break;
            case 29: /* reduce ANextParam */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce AAoclexpression1OclExpression */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list, false);
            }
            break;
            case 31: /* reduce AAoclexpression2OclExpression */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list, false);
            }
            break;
            case 32: /* reduce AAletdeclaration1LetDeclaration */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce AAletdeclaration2LetDeclaration */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce AAletexpression1LetExpression */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce AAletexpression2LetExpression */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AAletexpression3LetExpression */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AAletexpression4LetExpression */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce ALetParameterList */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce ATypePostfix */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list, false);
            }
            break;
            case 40: /* reduce AIfExpression */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list, false);
            }
            break;
            case 41: /* reduce AExpression */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list, false);
            }
            break;
            case 42: /* reduce AAlogicalexpression1LogicalExpression */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list, false);
            }
            break;
            case 43: /* reduce AAlogicalexpression2LogicalExpression */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list, false);
            }
            break;
            case 44: /* reduce AImplication */
            {
                ArrayList<Object> list = new44();
                push(goTo(21), list, false);
            }
            break;
            case 45: /* reduce AAbooleanexpression1BooleanExpression */
            {
                ArrayList<Object> list = new45();
                push(goTo(22), list, false);
            }
            break;
            case 46: /* reduce AAbooleanexpression2BooleanExpression */
            {
                ArrayList<Object> list = new46();
                push(goTo(22), list, false);
            }
            break;
            case 47: /* reduce ABooleanOperation */
            {
                ArrayList<Object> list = new47();
                push(goTo(23), list, false);
            }
            break;
            case 48: /* reduce AArelationalexpression1RelationalExpression */
            {
                ArrayList<Object> list = new48();
                push(goTo(24), list, false);
            }
            break;
            case 49: /* reduce AArelationalexpression2RelationalExpression */
            {
                ArrayList<Object> list = new49();
                push(goTo(24), list, false);
            }
            break;
            case 50: /* reduce AEquation */
            {
                ArrayList<Object> list = new50();
                push(goTo(25), list, false);
            }
            break;
            case 51: /* reduce AAcompareableexpression1CompareableExpression */
            {
                ArrayList<Object> list = new51();
                push(goTo(26), list, false);
            }
            break;
            case 52: /* reduce AAcompareableexpression2CompareableExpression */
            {
                ArrayList<Object> list = new52();
                push(goTo(26), list, false);
            }
            break;
            case 53: /* reduce AComparison */
            {
                ArrayList<Object> list = new53();
                push(goTo(27), list, false);
            }
            break;
            case 54: /* reduce AAadditiveexpression1AdditiveExpression */
            {
                ArrayList<Object> list = new54();
                push(goTo(28), list, false);
            }
            break;
            case 55: /* reduce AAadditiveexpression2AdditiveExpression */
            {
                ArrayList<Object> list = new55();
                push(goTo(28), list, false);
            }
            break;
            case 56: /* reduce AAddition */
            {
                ArrayList<Object> list = new56();
                push(goTo(29), list, false);
            }
            break;
            case 57: /* reduce AAmultiplicativeexpression1MultiplicativeExpression */
            {
                ArrayList<Object> list = new57();
                push(goTo(30), list, false);
            }
            break;
            case 58: /* reduce AAmultiplicativeexpression2MultiplicativeExpression */
            {
                ArrayList<Object> list = new58();
                push(goTo(30), list, false);
            }
            break;
            case 59: /* reduce AMultiplication */
            {
                ArrayList<Object> list = new59();
                push(goTo(31), list, false);
            }
            break;
            case 60: /* reduce APrefixedUnaryExpression */
            {
                ArrayList<Object> list = new60();
                push(goTo(32), list, false);
            }
            break;
            case 61: /* reduce AUnaryExpression */
            {
                ArrayList<Object> list = new61();
                push(goTo(32), list, false);
            }
            break;
            case 62: /* reduce AApostfixexpression1PostfixExpression */
            {
                ArrayList<Object> list = new62();
                push(goTo(33), list, false);
            }
            break;
            case 63: /* reduce AApostfixexpression2PostfixExpression */
            {
                ArrayList<Object> list = new63();
                push(goTo(33), list, false);
            }
            break;
            case 64: /* reduce AObjectPropertyInvocation */
            {
                ArrayList<Object> list = new64();
                push(goTo(34), list, false);
            }
            break;
            case 65: /* reduce ACollectionPropertyInvocation */
            {
                ArrayList<Object> list = new65();
                push(goTo(34), list, false);
            }
            break;
            case 66: /* reduce ACollectionPrimaryExpression */
            {
                ArrayList<Object> list = new66();
                push(goTo(35), list, false);
            }
            break;
            case 67: /* reduce ALiteralPrimaryExpression */
            {
                ArrayList<Object> list = new67();
                push(goTo(35), list, false);
            }
            break;
            case 68: /* reduce APropertyCallPrimaryExpression */
            {
                ArrayList<Object> list = new68();
                push(goTo(35), list, false);
            }
            break;
            case 69: /* reduce AParenthesedPrimaryExpression */
            {
                ArrayList<Object> list = new69();
                push(goTo(35), list, false);
            }
            break;
            case 70: /* reduce AIfPrimaryExpression */
            {
                ArrayList<Object> list = new70();
                push(goTo(35), list, false);
            }
            break;
            case 71: /* reduce ATimeExpression */
            {
                ArrayList<Object> list = new71();
                push(goTo(36), list, false);
            }
            break;
            case 72: /* reduce AApropertycall1PropertyCall */
            {
                ArrayList<Object> list = new72();
                push(goTo(37), list, false);
            }
            break;
            case 73: /* reduce AApropertycall2PropertyCall */
            {
                ArrayList<Object> list = new73();
                push(goTo(37), list, false);
            }
            break;
            case 74: /* reduce AApropertycall3PropertyCall */
            {
                ArrayList<Object> list = new74();
                push(goTo(37), list, false);
            }
            break;
            case 75: /* reduce AApropertycall4PropertyCall */
            {
                ArrayList<Object> list = new75();
                push(goTo(37), list, false);
            }
            break;
            case 76: /* reduce AApropertycall5PropertyCall */
            {
                ArrayList<Object> list = new76();
                push(goTo(37), list, false);
            }
            break;
            case 77: /* reduce AApropertycall6PropertyCall */
            {
                ArrayList<Object> list = new77();
                push(goTo(37), list, false);
            }
            break;
            case 78: /* reduce AApropertycall7PropertyCall */
            {
                ArrayList<Object> list = new78();
                push(goTo(37), list, false);
            }
            break;
            case 79: /* reduce AApropertycall8PropertyCall */
            {
                ArrayList<Object> list = new79();
                push(goTo(37), list, false);
            }
            break;
            case 80: /* reduce AApropertycallparameters1PropertyCallParameters */
            {
                ArrayList<Object> list = new80();
                push(goTo(38), list, false);
            }
            break;
            case 81: /* reduce AApropertycallparameters2PropertyCallParameters */
            {
                ArrayList<Object> list = new81();
                push(goTo(38), list, false);
            }
            break;
            case 82: /* reduce AApropertycallparameters3PropertyCallParameters */
            {
                ArrayList<Object> list = new82();
                push(goTo(38), list, false);
            }
            break;
            case 83: /* reduce AApropertycallparameters4PropertyCallParameters */
            {
                ArrayList<Object> list = new83();
                push(goTo(38), list, false);
            }
            break;
            case 84: /* reduce AAactualparameterlist1ActualParameterList */
            {
                ArrayList<Object> list = new84();
                push(goTo(39), list, false);
            }
            break;
            case 85: /* reduce AAactualparameterlist2ActualParameterList */
            {
                ArrayList<Object> list = new85();
                push(goTo(39), list, false);
            }
            break;
            case 86: /* reduce ANextExpr */
            {
                ArrayList<Object> list = new86();
                push(goTo(40), list, false);
            }
            break;
            case 87: /* reduce AAconcretedeclarator1Declarator */
            {
                ArrayList<Object> list = new87();
                push(goTo(41), list, false);
            }
            break;
            case 88: /* reduce AAconcretedeclarator2Declarator */
            {
                ArrayList<Object> list = new88();
                push(goTo(41), list, false);
            }
            break;
            case 89: /* reduce AAconcretedeclarator3Declarator */
            {
                ArrayList<Object> list = new89();
                push(goTo(41), list, false);
            }
            break;
            case 90: /* reduce AAconcretedeclarator4Declarator */
            {
                ArrayList<Object> list = new90();
                push(goTo(41), list, false);
            }
            break;
            case 91: /* reduce AAccumulator */
            {
                ArrayList<Object> list = new91();
                push(goTo(42), list, false);
            }
            break;
            case 92: /* reduce AAnamelist1NameList */
            {
                ArrayList<Object> list = new92();
                push(goTo(43), list, false);
            }
            break;
            case 93: /* reduce AAnamelist2NameList */
            {
                ArrayList<Object> list = new93();
                push(goTo(43), list, false);
            }
            break;
            case 94: /* reduce ANextName */
            {
                ArrayList<Object> list = new94();
                push(goTo(44), list, false);
            }
            break;
            case 95: /* reduce ASimpleTypePostfix */
            {
                ArrayList<Object> list = new95();
                push(goTo(45), list, false);
            }
            break;
            case 96: /* reduce AQualifiers */
            {
                ArrayList<Object> list = new96();
                push(goTo(46), list, false);
            }
            break;
            case 97: /* reduce ALogicalOperator */
            {
                ArrayList<Object> list = new97();
                push(goTo(47), list, false);
            }
            break;
            case 98: /* reduce AImplicativeLogicalOperator */
            {
                ArrayList<Object> list = new98();
                push(goTo(47), list, false);
            }
            break;
            case 99: /* reduce AAndBooleanOperator */
            {
                ArrayList<Object> list = new99();
                push(goTo(48), list, false);
            }
            break;
            case 100: /* reduce AOrBooleanOperator */
            {
                ArrayList<Object> list = new100();
                push(goTo(48), list, false);
            }
            break;
            case 101: /* reduce AXorBooleanOperator */
            {
                ArrayList<Object> list = new101();
                push(goTo(48), list, false);
            }
            break;
            case 102: /* reduce AImpliesOperator */
            {
                ArrayList<Object> list = new102();
                push(goTo(49), list, false);
            }
            break;
            case 103: /* reduce AEqualityRelationalOperator */
            {
                ArrayList<Object> list = new103();
                push(goTo(50), list, false);
            }
            break;
            case 104: /* reduce ACompareRelationalOperator */
            {
                ArrayList<Object> list = new104();
                push(goTo(50), list, false);
            }
            break;
            case 105: /* reduce AEquationOperator */
            {
                ArrayList<Object> list = new105();
                push(goTo(51), list, false);
            }
            break;
            case 106: /* reduce AInEquationOperator */
            {
                ArrayList<Object> list = new106();
                push(goTo(51), list, false);
            }
            break;
            case 107: /* reduce AGtCompareOperator */
            {
                ArrayList<Object> list = new107();
                push(goTo(52), list, false);
            }
            break;
            case 108: /* reduce ALtCompareOperator */
            {
                ArrayList<Object> list = new108();
                push(goTo(52), list, false);
            }
            break;
            case 109: /* reduce AGteqCompareOperator */
            {
                ArrayList<Object> list = new109();
                push(goTo(52), list, false);
            }
            break;
            case 110: /* reduce ALteqCompareOperator */
            {
                ArrayList<Object> list = new110();
                push(goTo(52), list, false);
            }
            break;
            case 111: /* reduce APlusAddOperator */
            {
                ArrayList<Object> list = new111();
                push(goTo(53), list, false);
            }
            break;
            case 112: /* reduce AMinusAddOperator */
            {
                ArrayList<Object> list = new112();
                push(goTo(53), list, false);
            }
            break;
            case 113: /* reduce AMultMultiplyOperator */
            {
                ArrayList<Object> list = new113();
                push(goTo(54), list, false);
            }
            break;
            case 114: /* reduce ADivMultiplyOperator */
            {
                ArrayList<Object> list = new114();
                push(goTo(54), list, false);
            }
            break;
            case 115: /* reduce AMinusUnaryOperator */
            {
                ArrayList<Object> list = new115();
                push(goTo(55), list, false);
            }
            break;
            case 116: /* reduce ANotUnaryOperator */
            {
                ArrayList<Object> list = new116();
                push(goTo(55), list, false);
            }
            break;
            case 117: /* reduce AOclAnyTypeSpecifier */
            {
                ArrayList<Object> list = new117();
                push(goTo(56), list, false);
            }
            break;
            case 118: /* reduce ACollectionTypeSpecifier */
            {
                ArrayList<Object> list = new118();
                push(goTo(56), list, false);
            }
            break;
            case 119: /* reduce ASimpleTypeSpecifier */
            {
                ArrayList<Object> list = new119();
                push(goTo(57), list, false);
            }
            break;
            case 120: /* reduce ACollectionType */
            {
                ArrayList<Object> list = new120();
                push(goTo(58), list, false);
            }
            break;
            case 121: /* reduce ASetCollectionKind */
            {
                ArrayList<Object> list = new121();
                push(goTo(59), list, false);
            }
            break;
            case 122: /* reduce ABagCollectionKind */
            {
                ArrayList<Object> list = new122();
                push(goTo(59), list, false);
            }
            break;
            case 123: /* reduce ASequenceCollectionKind */
            {
                ArrayList<Object> list = new123();
                push(goTo(59), list, false);
            }
            break;
            case 124: /* reduce ACollectionKind */
            {
                ArrayList<Object> list = new124();
                push(goTo(59), list, false);
            }
            break;
            case 125: /* reduce ALiteralCollection */
            {
                ArrayList<Object> list = new125();
                push(goTo(60), list, false);
            }
            break;
            case 126: /* reduce AAcollectionitemlist1CollectionItemList */
            {
                ArrayList<Object> list = new126();
                push(goTo(61), list, false);
            }
            break;
            case 127: /* reduce AAcollectionitemlist2CollectionItemList */
            {
                ArrayList<Object> list = new127();
                push(goTo(61), list, false);
            }
            break;
            case 128: /* reduce ANextCollectionItem */
            {
                ArrayList<Object> list = new128();
                push(goTo(62), list, false);
            }
            break;
            case 129: /* reduce AAcollectionitem1CollectionItem */
            {
                ArrayList<Object> list = new129();
                push(goTo(63), list, false);
            }
            break;
            case 130: /* reduce AAcollectionitem2CollectionItem */
            {
                ArrayList<Object> list = new130();
                push(goTo(63), list, false);
            }
            break;
            case 131: /* reduce ARange */
            {
                ArrayList<Object> list = new131();
                push(goTo(64), list, false);
            }
            break;
            case 132: /* reduce AStringLiteral */
            {
                ArrayList<Object> list = new132();
                push(goTo(65), list, false);
            }
            break;
            case 133: /* reduce ANumberLiteral */
            {
                ArrayList<Object> list = new133();
                push(goTo(65), list, false);
            }
            break;
            case 134: /* reduce ABooleanLiteral */
            {
                ArrayList<Object> list = new134();
                push(goTo(65), list, false);
            }
            break;
            case 135: /* reduce AName */
            {
                ArrayList<Object> list = new135();
                push(goTo(66), list, false);
            }
            break;
            case 136: /* reduce AApathname1PathName */
            {
                ArrayList<Object> list = new136();
                push(goTo(67), list, false);
            }
            break;
            case 137: /* reduce AApathname2PathName */
            {
                ArrayList<Object> list = new137();
                push(goTo(67), list, false);
            }
            break;
            case 138: /* reduce ANameQualifier */
            {
                ArrayList<Object> list = new138();
                push(goTo(68), list, false);
            }
            break;
            case 139: /* reduce ATerminal$Constraint */
            {
                ArrayList<Object> list = new139();
                push(goTo(69), list, true);
            }
            break;
            case 140: /* reduce ANonTerminal$Constraint */
            {
                ArrayList<Object> list = new140();
                push(goTo(69), list, true);
            }
            break;
            case 141: /* reduce ATerminal$ContextBodypart */
            {
                ArrayList<Object> list = new141();
                push(goTo(70), list, true);
            }
            break;
            case 142: /* reduce ANonTerminal$ContextBodypart */
            {
                ArrayList<Object> list = new142();
                push(goTo(70), list, true);
            }
            break;
            case 143: /* reduce ATerminal$LetExpression */
            {
                ArrayList<Object> list = new143();
                push(goTo(71), list, true);
            }
            break;
            case 144: /* reduce ANonTerminal$LetExpression */
            {
                ArrayList<Object> list = new144();
                push(goTo(71), list, true);
            }
            break;
            case 145: /* reduce ATerminal$NextParam */
            {
                ArrayList<Object> list = new145();
                push(goTo(72), list, true);
            }
            break;
            case 146: /* reduce ANonTerminal$NextParam */
            {
                ArrayList<Object> list = new146();
                push(goTo(72), list, true);
            }
            break;
            case 147: /* reduce ATerminal$Implication */
            {
                ArrayList<Object> list = new147();
                push(goTo(73), list, true);
            }
            break;
            case 148: /* reduce ANonTerminal$Implication */
            {
                ArrayList<Object> list = new148();
                push(goTo(73), list, true);
            }
            break;
            case 149: /* reduce ATerminal$BooleanOperation */
            {
                ArrayList<Object> list = new149();
                push(goTo(74), list, true);
            }
            break;
            case 150: /* reduce ANonTerminal$BooleanOperation */
            {
                ArrayList<Object> list = new150();
                push(goTo(74), list, true);
            }
            break;
            case 151: /* reduce ATerminal$Addition */
            {
                ArrayList<Object> list = new151();
                push(goTo(75), list, true);
            }
            break;
            case 152: /* reduce ANonTerminal$Addition */
            {
                ArrayList<Object> list = new152();
                push(goTo(75), list, true);
            }
            break;
            case 153: /* reduce ATerminal$Multiplication */
            {
                ArrayList<Object> list = new153();
                push(goTo(76), list, true);
            }
            break;
            case 154: /* reduce ANonTerminal$Multiplication */
            {
                ArrayList<Object> list = new154();
                push(goTo(76), list, true);
            }
            break;
            case 155: /* reduce ATerminal$PropertyInvocation */
            {
                ArrayList<Object> list = new155();
                push(goTo(77), list, true);
            }
            break;
            case 156: /* reduce ANonTerminal$PropertyInvocation */
            {
                ArrayList<Object> list = new156();
                push(goTo(77), list, true);
            }
            break;
            case 157: /* reduce ATerminal$NextExpr */
            {
                ArrayList<Object> list = new157();
                push(goTo(78), list, true);
            }
            break;
            case 158: /* reduce ANonTerminal$NextExpr */
            {
                ArrayList<Object> list = new158();
                push(goTo(78), list, true);
            }
            break;
            case 159: /* reduce ATerminal$NextName */
            {
                ArrayList<Object> list = new159();
                push(goTo(79), list, true);
            }
            break;
            case 160: /* reduce ANonTerminal$NextName */
            {
                ArrayList<Object> list = new160();
                push(goTo(79), list, true);
            }
            break;
            case 161: /* reduce ATerminal$NextCollectionItem */
            {
                ArrayList<Object> list = new161();
                push(goTo(80), list, true);
            }
            break;
            case 162: /* reduce ANonTerminal$NextCollectionItem */
            {
                ArrayList<Object> list = new162();
                push(goTo(80), list, true);
            }
            break;
            case 163: /* reduce ATerminal$NameQualifier */
            {
                ArrayList<Object> list = new163();
                push(goTo(81), list, true);
            }
            break;
            case 164: /* reduce ANonTerminal$NameQualifier */
            {
                ArrayList<Object> list = new164();
                push(goTo(81), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAoclfile1OclFile */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POclFile poclfileNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        poclfileNode1 = new AOclFile(listNode2);
        }
	nodeList.add(poclfileNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAoclfile2OclFile */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POclFile poclfileNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        poclfileNode1 = new AOclFile(listNode3);
        }
	nodeList.add(poclfileNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AConstraint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstraint pconstraintNode1;
        {
            // Block
        PContextDeclaration pcontextdeclarationNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pcontextdeclarationNode2 = (PContextDeclaration)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pconstraintNode1 = new AConstraint(pcontextdeclarationNode2, listNode4);
        }
	nodeList.add(pconstraintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAdefinitioncontextbodypart1ContextBodypart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextBodypart pcontextbodypartNode1;
        {
            // Block
        TDef tdefNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TColon tcolonNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        {
            // Block
        }

        pcontextbodypartNode1 = new ADefinitionContextBodypart(tdefNode2, null, tcolonNode4, listNode5);
        }
	nodeList.add(pcontextbodypartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAdefinitioncontextbodypart2ContextBodypart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextBodypart pcontextbodypartNode1;
        {
            // Block
        TDef tdefNode2;
        PName pnameNode3;
        TColon tcolonNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        pnameNode3 = (PName)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        {
            // Block
        }

        pcontextbodypartNode1 = new ADefinitionContextBodypart(tdefNode2, pnameNode3, tcolonNode4, listNode5);
        }
	nodeList.add(pcontextbodypartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAdefinitioncontextbodypart3ContextBodypart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextBodypart pcontextbodypartNode1;
        {
            // Block
        TDef tdefNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TColon tcolonNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcontextbodypartNode1 = new ADefinitionContextBodypart(tdefNode2, null, tcolonNode4, listNode6);
        }
	nodeList.add(pcontextbodypartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAdefinitioncontextbodypart4ContextBodypart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextBodypart pcontextbodypartNode1;
        {
            // Block
        TDef tdefNode2;
        PName pnameNode3;
        TColon tcolonNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        pnameNode3 = (PName)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcontextbodypartNode1 = new ADefinitionContextBodypart(tdefNode2, pnameNode3, tcolonNode4, listNode6);
        }
	nodeList.add(pcontextbodypartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAconstraintcontextbodypart1ContextBodypart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextBodypart pcontextbodypartNode1;
        {
            // Block
        PStereotype pstereotypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TColon tcolonNode4;
        POclExpression poclexpressionNode5;
        pstereotypeNode2 = (PStereotype)nodeArrayList1.get(0);
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        poclexpressionNode5 = (POclExpression)nodeArrayList3.get(0);

        pcontextbodypartNode1 = new AConstraintContextBodypart(pstereotypeNode2, null, tcolonNode4, poclexpressionNode5);
        }
	nodeList.add(pcontextbodypartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAconstraintcontextbodypart2ContextBodypart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextBodypart pcontextbodypartNode1;
        {
            // Block
        PStereotype pstereotypeNode2;
        PName pnameNode3;
        TColon tcolonNode4;
        POclExpression poclexpressionNode5;
        pstereotypeNode2 = (PStereotype)nodeArrayList1.get(0);
        pnameNode3 = (PName)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        poclexpressionNode5 = (POclExpression)nodeArrayList4.get(0);

        pcontextbodypartNode1 = new AConstraintContextBodypart(pstereotypeNode2, pnameNode3, tcolonNode4, poclexpressionNode5);
        }
	nodeList.add(pcontextbodypartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AContextDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextDeclaration pcontextdeclarationNode1;
        {
            // Block
        TContext tcontextNode2;
        PContextKind pcontextkindNode3;
        tcontextNode2 = (TContext)nodeArrayList1.get(0);
        pcontextkindNode3 = (PContextKind)nodeArrayList2.get(0);

        pcontextdeclarationNode1 = new AContextDeclaration(tcontextNode2, pcontextkindNode3);
        }
	nodeList.add(pcontextdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAoperationcontextkind1ContextKind */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextKind pcontextkindNode1;
        {
            // Block
        PName pnameNode2;
        TDcolon tdcolonNode3;
        PContextOperationName pcontextoperationnameNode4;
        TLPar tlparNode5;
        PFormalParameterList pformalparameterlistNode6;
        TRPar trparNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tdcolonNode3 = (TDcolon)nodeArrayList2.get(0);
        pcontextoperationnameNode4 = (PContextOperationName)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pformalparameterlistNode6 = (PFormalParameterList)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pcontextkindNode1 = new AOperationContextKind(pnameNode2, tdcolonNode3, pcontextoperationnameNode4, tlparNode5, pformalparameterlistNode6, trparNode7, null);
        }
	nodeList.add(pcontextkindNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAoperationcontextkind2ContextKind */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextKind pcontextkindNode1;
        {
            // Block
        PName pnameNode2;
        TDcolon tdcolonNode3;
        PContextOperationName pcontextoperationnameNode4;
        TLPar tlparNode5;
        PFormalParameterList pformalparameterlistNode6;
        TRPar trparNode7;
        PReturnType preturntypeNode8;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tdcolonNode3 = (TDcolon)nodeArrayList2.get(0);
        pcontextoperationnameNode4 = (PContextOperationName)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pformalparameterlistNode6 = (PFormalParameterList)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        preturntypeNode8 = (PReturnType)nodeArrayList7.get(0);

        pcontextkindNode1 = new AOperationContextKind(pnameNode2, tdcolonNode3, pcontextoperationnameNode4, tlparNode5, pformalparameterlistNode6, trparNode7, preturntypeNode8);
        }
	nodeList.add(pcontextkindNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAclassifiercontextkind1ContextKind */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextKind pcontextkindNode1;
        {
            // Block
        PName pnameNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pcontextkindNode1 = new AClassifierContextKind(pnameNode2, null);
        }
	nodeList.add(pcontextkindNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAclassifiercontextkind2ContextKind */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextKind pcontextkindNode1;
        {
            // Block
        PName pnameNode2;
        PClassifierType pclassifiertypeNode3;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        pclassifiertypeNode3 = (PClassifierType)nodeArrayList2.get(0);

        pcontextkindNode1 = new AClassifierContextKind(pnameNode2, pclassifiertypeNode3);
        }
	nodeList.add(pcontextkindNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block
        TColon tcolonNode2;
        PTypeSpecifier ptypespecifierNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        ptypespecifierNode3 = (PTypeSpecifier)nodeArrayList2.get(0);

        preturntypeNode1 = new AReturnType(tcolonNode2, ptypespecifierNode3);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AClassifierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassifierType pclassifiertypeNode1;
        {
            // Block
        TColon tcolonNode2;
        PName pnameNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        pnameNode3 = (PName)nodeArrayList2.get(0);

        pclassifiertypeNode1 = new AClassifierType(tcolonNode2, pnameNode3);
        }
	nodeList.add(pclassifiertypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce APreConditionStereotype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStereotype pstereotypeNode1;
        {
            // Block
        TPre tpreNode2;
        tpreNode2 = (TPre)nodeArrayList1.get(0);

        pstereotypeNode1 = new APreConditionStereotype(tpreNode2);
        }
	nodeList.add(pstereotypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce APostConditionStereotype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStereotype pstereotypeNode1;
        {
            // Block
        TPost tpostNode2;
        tpostNode2 = (TPost)nodeArrayList1.get(0);

        pstereotypeNode1 = new APostConditionStereotype(tpostNode2);
        }
	nodeList.add(pstereotypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AInvariantStereotype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStereotype pstereotypeNode1;
        {
            // Block
        TInv tinvNode2;
        tinvNode2 = (TInv)nodeArrayList1.get(0);

        pstereotypeNode1 = new AInvariantStereotype(tinvNode2);
        }
	nodeList.add(pstereotypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AContextOperationName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextOperationName pcontextoperationnameNode1;
        {
            // Block
        PName pnameNode2;
        pnameNode2 = (PName)nodeArrayList1.get(0);

        pcontextoperationnameNode1 = new AContextOperationName(pnameNode2);
        }
	nodeList.add(pcontextoperationnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ALogicalContextOperationName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextOperationName pcontextoperationnameNode1;
        {
            // Block
        PLogicalOperator plogicaloperatorNode2;
        plogicaloperatorNode2 = (PLogicalOperator)nodeArrayList1.get(0);

        pcontextoperationnameNode1 = new ALogicalContextOperationName(plogicaloperatorNode2);
        }
	nodeList.add(pcontextoperationnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ARelationalContextOperationName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextOperationName pcontextoperationnameNode1;
        {
            // Block
        PRelationalOperator prelationaloperatorNode2;
        prelationaloperatorNode2 = (PRelationalOperator)nodeArrayList1.get(0);

        pcontextoperationnameNode1 = new ARelationalContextOperationName(prelationaloperatorNode2);
        }
	nodeList.add(pcontextoperationnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAddContextOperationName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextOperationName pcontextoperationnameNode1;
        {
            // Block
        PAddOperator paddoperatorNode2;
        paddoperatorNode2 = (PAddOperator)nodeArrayList1.get(0);

        pcontextoperationnameNode1 = new AAddContextOperationName(paddoperatorNode2);
        }
	nodeList.add(pcontextoperationnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AMultiplyContextOperationName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PContextOperationName pcontextoperationnameNode1;
        {
            // Block
        PMultiplyOperator pmultiplyoperatorNode2;
        pmultiplyoperatorNode2 = (PMultiplyOperator)nodeArrayList1.get(0);

        pcontextoperationnameNode1 = new AMultiplyContextOperationName(pmultiplyoperatorNode2);
        }
	nodeList.add(pcontextoperationnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAformalparameterlist1FormalParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFormalParameterList pformalparameterlistNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pformalparameterlistNode1 = new AFormalParameterList(null);
        }
	nodeList.add(pformalparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAformalparameterlist2FormalParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalParameterList pformalparameterlistNode1;
        {
            // Block
        PParamList pparamlistNode2;
        pparamlistNode2 = (PParamList)nodeArrayList1.get(0);

        pformalparameterlistNode1 = new AFormalParameterList(pparamlistNode2);
        }
	nodeList.add(pformalparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAparamlist1ParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamList pparamlistNode1;
        {
            // Block
        PFormalParameter pformalparameterNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pformalparameterNode2 = (PFormalParameter)nodeArrayList1.get(0);
        {
            // Block
        }

        pparamlistNode1 = new AParamList(pformalparameterNode2, listNode3);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAparamlist2ParamList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamList pparamlistNode1;
        {
            // Block
        PFormalParameter pformalparameterNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pformalparameterNode2 = (PFormalParameter)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparamlistNode1 = new AParamList(pformalparameterNode2, listNode4);
        }
	nodeList.add(pparamlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AFormalParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalParameter pformalparameterNode1;
        {
            // Block
        PName pnameNode2;
        PTypePostfix ptypepostfixNode3;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        ptypepostfixNode3 = (PTypePostfix)nodeArrayList2.get(0);

        pformalparameterNode1 = new AFormalParameter(pnameNode2, ptypepostfixNode3);
        }
	nodeList.add(pformalparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ANextParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextParam pnextparamNode1;
        {
            // Block
        TComma tcommaNode2;
        PFormalParameter pformalparameterNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pformalparameterNode3 = (PFormalParameter)nodeArrayList2.get(0);

        pnextparamNode1 = new ANextParam(tcommaNode2, pformalparameterNode3);
        }
	nodeList.add(pnextparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAoclexpression1OclExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POclExpression poclexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PExpression pexpressionNode3;
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);

        poclexpressionNode1 = new AOclExpression(null, pexpressionNode3);
        }
	nodeList.add(poclexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAoclexpression2OclExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POclExpression poclexpressionNode1;
        {
            // Block
        PLetDeclaration pletdeclarationNode2;
        PExpression pexpressionNode3;
        pletdeclarationNode2 = (PLetDeclaration)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        poclexpressionNode1 = new AOclExpression(pletdeclarationNode2, pexpressionNode3);
        }
	nodeList.add(poclexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAletdeclaration1LetDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLetDeclaration pletdeclarationNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TIn tinNode3;
        {
            // Block
        }
        tinNode3 = (TIn)nodeArrayList1.get(0);

        pletdeclarationNode1 = new ALetDeclaration(listNode2, tinNode3);
        }
	nodeList.add(pletdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAletdeclaration2LetDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLetDeclaration pletdeclarationNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TIn tinNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tinNode4 = (TIn)nodeArrayList2.get(0);

        pletdeclarationNode1 = new ALetDeclaration(listNode3, tinNode4);
        }
	nodeList.add(pletdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAletexpression1LetExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLetExpression pletexpressionNode1;
        {
            // Block
        TLet tletNode2;
        PName pnameNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TEqual tequalNode6;
        PExpression pexpressionNode7;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        pnameNode3 = (PName)nodeArrayList2.get(0);
        tequalNode6 = (TEqual)nodeArrayList3.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList4.get(0);

        pletexpressionNode1 = new ALetExpression(tletNode2, pnameNode3, null, null, tequalNode6, pexpressionNode7);
        }
	nodeList.add(pletexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAletexpression2LetExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLetExpression pletexpressionNode1;
        {
            // Block
        TLet tletNode2;
        PName pnameNode3;
        PLetParameterList pletparameterlistNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TEqual tequalNode6;
        PExpression pexpressionNode7;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        pnameNode3 = (PName)nodeArrayList2.get(0);
        pletparameterlistNode4 = (PLetParameterList)nodeArrayList3.get(0);
        tequalNode6 = (TEqual)nodeArrayList4.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList5.get(0);

        pletexpressionNode1 = new ALetExpression(tletNode2, pnameNode3, pletparameterlistNode4, null, tequalNode6, pexpressionNode7);
        }
	nodeList.add(pletexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAletexpression3LetExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLetExpression pletexpressionNode1;
        {
            // Block
        TLet tletNode2;
        PName pnameNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PTypePostfix ptypepostfixNode5;
        TEqual tequalNode6;
        PExpression pexpressionNode7;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        pnameNode3 = (PName)nodeArrayList2.get(0);
        ptypepostfixNode5 = (PTypePostfix)nodeArrayList3.get(0);
        tequalNode6 = (TEqual)nodeArrayList4.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList5.get(0);

        pletexpressionNode1 = new ALetExpression(tletNode2, pnameNode3, null, ptypepostfixNode5, tequalNode6, pexpressionNode7);
        }
	nodeList.add(pletexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAletexpression4LetExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLetExpression pletexpressionNode1;
        {
            // Block
        TLet tletNode2;
        PName pnameNode3;
        PLetParameterList pletparameterlistNode4;
        PTypePostfix ptypepostfixNode5;
        TEqual tequalNode6;
        PExpression pexpressionNode7;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        pnameNode3 = (PName)nodeArrayList2.get(0);
        pletparameterlistNode4 = (PLetParameterList)nodeArrayList3.get(0);
        ptypepostfixNode5 = (PTypePostfix)nodeArrayList4.get(0);
        tequalNode6 = (TEqual)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);

        pletexpressionNode1 = new ALetExpression(tletNode2, pnameNode3, pletparameterlistNode4, ptypepostfixNode5, tequalNode6, pexpressionNode7);
        }
	nodeList.add(pletexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ALetParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLetParameterList pletparameterlistNode1;
        {
            // Block
        TLPar tlparNode2;
        PFormalParameterList pformalparameterlistNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pformalparameterlistNode3 = (PFormalParameterList)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pletparameterlistNode1 = new ALetParameterList(tlparNode2, pformalparameterlistNode3, trparNode4);
        }
	nodeList.add(pletparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ATypePostfix */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypePostfix ptypepostfixNode1;
        {
            // Block
        TColon tcolonNode2;
        PTypeSpecifier ptypespecifierNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        ptypespecifierNode3 = (PTypeSpecifier)nodeArrayList2.get(0);

        ptypepostfixNode1 = new ATypePostfix(tcolonNode2, ptypespecifierNode3);
        }
	nodeList.add(ptypepostfixNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIfExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfExpression pifexpressionNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        PExpression pexpressionNode5;
        TElse telseNode6;
        PExpression pexpressionNode7;
        TEndif tendifNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        telseNode6 = (TElse)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);
        tendifNode8 = (TEndif)nodeArrayList7.get(0);

        pifexpressionNode1 = new AIfExpression(tifNode2, pexpressionNode3, tthenNode4, pexpressionNode5, telseNode6, pexpressionNode7, tendifNode8);
        }
	nodeList.add(pifexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PLogicalExpression plogicalexpressionNode2;
        plogicalexpressionNode2 = (PLogicalExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(plogicalexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAlogicalexpression1LogicalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExpression plogicalexpressionNode1;
        {
            // Block
        PBooleanExpression pbooleanexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pbooleanexpressionNode2 = (PBooleanExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        plogicalexpressionNode1 = new ALogicalExpression(pbooleanexpressionNode2, listNode3);
        }
	nodeList.add(plogicalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAlogicalexpression2LogicalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalExpression plogicalexpressionNode1;
        {
            // Block
        PBooleanExpression pbooleanexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pbooleanexpressionNode2 = (PBooleanExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plogicalexpressionNode1 = new ALogicalExpression(pbooleanexpressionNode2, listNode4);
        }
	nodeList.add(plogicalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AImplication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImplication pimplicationNode1;
        {
            // Block
        PImpliesOperator pimpliesoperatorNode2;
        PBooleanExpression pbooleanexpressionNode3;
        pimpliesoperatorNode2 = (PImpliesOperator)nodeArrayList1.get(0);
        pbooleanexpressionNode3 = (PBooleanExpression)nodeArrayList2.get(0);

        pimplicationNode1 = new AImplication(pimpliesoperatorNode2, pbooleanexpressionNode3);
        }
	nodeList.add(pimplicationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAbooleanexpression1BooleanExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanExpression pbooleanexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pbooleanexpressionNode1 = new ABooleanExpression(prelationalexpressionNode2, listNode3);
        }
	nodeList.add(pbooleanexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAbooleanexpression2BooleanExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanExpression pbooleanexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pbooleanexpressionNode1 = new ABooleanExpression(prelationalexpressionNode2, listNode4);
        }
	nodeList.add(pbooleanexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ABooleanOperation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanOperation pbooleanoperationNode1;
        {
            // Block
        PBooleanOperator pbooleanoperatorNode2;
        PRelationalExpression prelationalexpressionNode3;
        pbooleanoperatorNode2 = (PBooleanOperator)nodeArrayList1.get(0);
        prelationalexpressionNode3 = (PRelationalExpression)nodeArrayList2.get(0);

        pbooleanoperationNode1 = new ABooleanOperation(pbooleanoperatorNode2, prelationalexpressionNode3);
        }
	nodeList.add(pbooleanoperationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AArelationalexpression1RelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PCompareableExpression pcompareableexpressionNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pcompareableexpressionNode2 = (PCompareableExpression)nodeArrayList1.get(0);

        prelationalexpressionNode1 = new ARelationalExpression(pcompareableexpressionNode2, null);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AArelationalexpression2RelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PCompareableExpression pcompareableexpressionNode2;
        PEquation pequationNode3;
        pcompareableexpressionNode2 = (PCompareableExpression)nodeArrayList1.get(0);
        pequationNode3 = (PEquation)nodeArrayList2.get(0);

        prelationalexpressionNode1 = new ARelationalExpression(pcompareableexpressionNode2, pequationNode3);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AEquation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEquation pequationNode1;
        {
            // Block
        PEquationOperator pequationoperatorNode2;
        PCompareableExpression pcompareableexpressionNode3;
        pequationoperatorNode2 = (PEquationOperator)nodeArrayList1.get(0);
        pcompareableexpressionNode3 = (PCompareableExpression)nodeArrayList2.get(0);

        pequationNode1 = new AEquation(pequationoperatorNode2, pcompareableexpressionNode3);
        }
	nodeList.add(pequationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAcompareableexpression1CompareableExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompareableExpression pcompareableexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);

        pcompareableexpressionNode1 = new ACompareableExpression(padditiveexpressionNode2, null);
        }
	nodeList.add(pcompareableexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAcompareableexpression2CompareableExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompareableExpression pcompareableexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        PComparison pcomparisonNode3;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);
        pcomparisonNode3 = (PComparison)nodeArrayList2.get(0);

        pcompareableexpressionNode1 = new ACompareableExpression(padditiveexpressionNode2, pcomparisonNode3);
        }
	nodeList.add(pcompareableexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PCompareOperator pcompareoperatorNode2;
        PAdditiveExpression padditiveexpressionNode3;
        pcompareoperatorNode2 = (PCompareOperator)nodeArrayList1.get(0);
        padditiveexpressionNode3 = (PAdditiveExpression)nodeArrayList2.get(0);

        pcomparisonNode1 = new AComparison(pcompareoperatorNode2, padditiveexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAadditiveexpression1AdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        padditiveexpressionNode1 = new AAdditiveExpression(pmultiplicativeexpressionNode2, listNode3);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAadditiveexpression2AdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        padditiveexpressionNode1 = new AAdditiveExpression(pmultiplicativeexpressionNode2, listNode4);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAddition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddition padditionNode1;
        {
            // Block
        PAddOperator paddoperatorNode2;
        PMultiplicativeExpression pmultiplicativeexpressionNode3;
        paddoperatorNode2 = (PAddOperator)nodeArrayList1.get(0);
        pmultiplicativeexpressionNode3 = (PMultiplicativeExpression)nodeArrayList2.get(0);

        padditionNode1 = new AAddition(paddoperatorNode2, pmultiplicativeexpressionNode3);
        }
	nodeList.add(padditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAmultiplicativeexpression1MultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PUnaryExpression punaryexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        punaryexpressionNode2 = (PUnaryExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pmultiplicativeexpressionNode1 = new AMultiplicativeExpression(punaryexpressionNode2, listNode3);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAmultiplicativeexpression2MultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PUnaryExpression punaryexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        punaryexpressionNode2 = (PUnaryExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pmultiplicativeexpressionNode1 = new AMultiplicativeExpression(punaryexpressionNode2, listNode4);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMultiplication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplication pmultiplicationNode1;
        {
            // Block
        PMultiplyOperator pmultiplyoperatorNode2;
        PUnaryExpression punaryexpressionNode3;
        pmultiplyoperatorNode2 = (PMultiplyOperator)nodeArrayList1.get(0);
        punaryexpressionNode3 = (PUnaryExpression)nodeArrayList2.get(0);

        pmultiplicationNode1 = new AMultiplication(pmultiplyoperatorNode2, punaryexpressionNode3);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce APrefixedUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        PUnaryOperator punaryoperatorNode2;
        PPostfixExpression ppostfixexpressionNode3;
        punaryoperatorNode2 = (PUnaryOperator)nodeArrayList1.get(0);
        ppostfixexpressionNode3 = (PPostfixExpression)nodeArrayList2.get(0);

        punaryexpressionNode1 = new APrefixedUnaryExpression(punaryoperatorNode2, ppostfixexpressionNode3);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        PPostfixExpression ppostfixexpressionNode2;
        ppostfixexpressionNode2 = (PPostfixExpression)nodeArrayList1.get(0);

        punaryexpressionNode1 = new AUnaryExpression(ppostfixexpressionNode2);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AApostfixexpression1PostfixExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPostfixExpression ppostfixexpressionNode1;
        {
            // Block
        PPrimaryExpression pprimaryexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pprimaryexpressionNode2 = (PPrimaryExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        ppostfixexpressionNode1 = new APostfixExpression(pprimaryexpressionNode2, listNode3);
        }
	nodeList.add(ppostfixexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AApostfixexpression2PostfixExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPostfixExpression ppostfixexpressionNode1;
        {
            // Block
        PPrimaryExpression pprimaryexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pprimaryexpressionNode2 = (PPrimaryExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ppostfixexpressionNode1 = new APostfixExpression(pprimaryexpressionNode2, listNode4);
        }
	nodeList.add(ppostfixexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AObjectPropertyInvocation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyInvocation ppropertyinvocationNode1;
        {
            // Block
        TDot tdotNode2;
        PPropertyCall ppropertycallNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        ppropertycallNode3 = (PPropertyCall)nodeArrayList2.get(0);

        ppropertyinvocationNode1 = new AObjectPropertyInvocation(tdotNode2, ppropertycallNode3);
        }
	nodeList.add(ppropertyinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ACollectionPropertyInvocation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyInvocation ppropertyinvocationNode1;
        {
            // Block
        TArrow tarrowNode2;
        PPropertyCall ppropertycallNode3;
        tarrowNode2 = (TArrow)nodeArrayList1.get(0);
        ppropertycallNode3 = (PPropertyCall)nodeArrayList2.get(0);

        ppropertyinvocationNode1 = new ACollectionPropertyInvocation(tarrowNode2, ppropertycallNode3);
        }
	nodeList.add(ppropertyinvocationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ACollectionPrimaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimaryExpression pprimaryexpressionNode1;
        {
            // Block
        PLiteralCollection pliteralcollectionNode2;
        pliteralcollectionNode2 = (PLiteralCollection)nodeArrayList1.get(0);

        pprimaryexpressionNode1 = new ACollectionPrimaryExpression(pliteralcollectionNode2);
        }
	nodeList.add(pprimaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ALiteralPrimaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimaryExpression pprimaryexpressionNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pprimaryexpressionNode1 = new ALiteralPrimaryExpression(pliteralNode2);
        }
	nodeList.add(pprimaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce APropertyCallPrimaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimaryExpression pprimaryexpressionNode1;
        {
            // Block
        PPropertyCall ppropertycallNode2;
        ppropertycallNode2 = (PPropertyCall)nodeArrayList1.get(0);

        pprimaryexpressionNode1 = new APropertyCallPrimaryExpression(ppropertycallNode2);
        }
	nodeList.add(pprimaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AParenthesedPrimaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimaryExpression pprimaryexpressionNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpression pexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pprimaryexpressionNode1 = new AParenthesedPrimaryExpression(tlparNode2, pexpressionNode3, trparNode4);
        }
	nodeList.add(pprimaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AIfPrimaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimaryExpression pprimaryexpressionNode1;
        {
            // Block
        PIfExpression pifexpressionNode2;
        pifexpressionNode2 = (PIfExpression)nodeArrayList1.get(0);

        pprimaryexpressionNode1 = new AIfPrimaryExpression(pifexpressionNode2);
        }
	nodeList.add(pprimaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATimeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTimeExpression ptimeexpressionNode1;
        {
            // Block
        TAt tatNode2;
        TPre tpreNode3;
        tatNode2 = (TAt)nodeArrayList1.get(0);
        tpreNode3 = (TPre)nodeArrayList2.get(0);

        ptimeexpressionNode1 = new ATimeExpression(tatNode2, tpreNode3);
        }
	nodeList.add(ptimeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AApropertycall1PropertyCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCall ppropertycallNode1;
        {
            // Block
        PPathName ppathnameNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        @SuppressWarnings("unused") Object nullNode5 = null;
        ppathnameNode2 = (PPathName)nodeArrayList1.get(0);

        ppropertycallNode1 = new APropertyCall(ppathnameNode2, null, null, null);
        }
	nodeList.add(ppropertycallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AApropertycall2PropertyCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCall ppropertycallNode1;
        {
            // Block
        PPathName ppathnameNode2;
        PTimeExpression ptimeexpressionNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        @SuppressWarnings("unused") Object nullNode5 = null;
        ppathnameNode2 = (PPathName)nodeArrayList1.get(0);
        ptimeexpressionNode3 = (PTimeExpression)nodeArrayList2.get(0);

        ppropertycallNode1 = new APropertyCall(ppathnameNode2, ptimeexpressionNode3, null, null);
        }
	nodeList.add(ppropertycallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AApropertycall3PropertyCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCall ppropertycallNode1;
        {
            // Block
        PPathName ppathnameNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PQualifiers pqualifiersNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        ppathnameNode2 = (PPathName)nodeArrayList1.get(0);
        pqualifiersNode4 = (PQualifiers)nodeArrayList2.get(0);

        ppropertycallNode1 = new APropertyCall(ppathnameNode2, null, pqualifiersNode4, null);
        }
	nodeList.add(ppropertycallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AApropertycall4PropertyCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCall ppropertycallNode1;
        {
            // Block
        PPathName ppathnameNode2;
        PTimeExpression ptimeexpressionNode3;
        PQualifiers pqualifiersNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        ppathnameNode2 = (PPathName)nodeArrayList1.get(0);
        ptimeexpressionNode3 = (PTimeExpression)nodeArrayList2.get(0);
        pqualifiersNode4 = (PQualifiers)nodeArrayList3.get(0);

        ppropertycallNode1 = new APropertyCall(ppathnameNode2, ptimeexpressionNode3, pqualifiersNode4, null);
        }
	nodeList.add(ppropertycallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AApropertycall5PropertyCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCall ppropertycallNode1;
        {
            // Block
        PPathName ppathnameNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PPropertyCallParameters ppropertycallparametersNode5;
        ppathnameNode2 = (PPathName)nodeArrayList1.get(0);
        ppropertycallparametersNode5 = (PPropertyCallParameters)nodeArrayList2.get(0);

        ppropertycallNode1 = new APropertyCall(ppathnameNode2, null, null, ppropertycallparametersNode5);
        }
	nodeList.add(ppropertycallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AApropertycall6PropertyCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCall ppropertycallNode1;
        {
            // Block
        PPathName ppathnameNode2;
        PTimeExpression ptimeexpressionNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PPropertyCallParameters ppropertycallparametersNode5;
        ppathnameNode2 = (PPathName)nodeArrayList1.get(0);
        ptimeexpressionNode3 = (PTimeExpression)nodeArrayList2.get(0);
        ppropertycallparametersNode5 = (PPropertyCallParameters)nodeArrayList3.get(0);

        ppropertycallNode1 = new APropertyCall(ppathnameNode2, ptimeexpressionNode3, null, ppropertycallparametersNode5);
        }
	nodeList.add(ppropertycallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AApropertycall7PropertyCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCall ppropertycallNode1;
        {
            // Block
        PPathName ppathnameNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PQualifiers pqualifiersNode4;
        PPropertyCallParameters ppropertycallparametersNode5;
        ppathnameNode2 = (PPathName)nodeArrayList1.get(0);
        pqualifiersNode4 = (PQualifiers)nodeArrayList2.get(0);
        ppropertycallparametersNode5 = (PPropertyCallParameters)nodeArrayList3.get(0);

        ppropertycallNode1 = new APropertyCall(ppathnameNode2, null, pqualifiersNode4, ppropertycallparametersNode5);
        }
	nodeList.add(ppropertycallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AApropertycall8PropertyCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCall ppropertycallNode1;
        {
            // Block
        PPathName ppathnameNode2;
        PTimeExpression ptimeexpressionNode3;
        PQualifiers pqualifiersNode4;
        PPropertyCallParameters ppropertycallparametersNode5;
        ppathnameNode2 = (PPathName)nodeArrayList1.get(0);
        ptimeexpressionNode3 = (PTimeExpression)nodeArrayList2.get(0);
        pqualifiersNode4 = (PQualifiers)nodeArrayList3.get(0);
        ppropertycallparametersNode5 = (PPropertyCallParameters)nodeArrayList4.get(0);

        ppropertycallNode1 = new APropertyCall(ppathnameNode2, ptimeexpressionNode3, pqualifiersNode4, ppropertycallparametersNode5);
        }
	nodeList.add(ppropertycallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AApropertycallparameters1PropertyCallParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCallParameters ppropertycallparametersNode1;
        {
            // Block
        TLPar tlparNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        trparNode5 = (TRPar)nodeArrayList2.get(0);

        ppropertycallparametersNode1 = new APropertyCallParameters(tlparNode2, null, null, trparNode5);
        }
	nodeList.add(ppropertycallparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AApropertycallparameters2PropertyCallParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCallParameters ppropertycallparametersNode1;
        {
            // Block
        TLPar tlparNode2;
        PDeclarator pdeclaratorNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pdeclaratorNode3 = (PDeclarator)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        ppropertycallparametersNode1 = new APropertyCallParameters(tlparNode2, pdeclaratorNode3, null, trparNode5);
        }
	nodeList.add(ppropertycallparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AApropertycallparameters3PropertyCallParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCallParameters ppropertycallparametersNode1;
        {
            // Block
        TLPar tlparNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PActualParameterList pactualparameterlistNode4;
        TRPar trparNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pactualparameterlistNode4 = (PActualParameterList)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        ppropertycallparametersNode1 = new APropertyCallParameters(tlparNode2, null, pactualparameterlistNode4, trparNode5);
        }
	nodeList.add(ppropertycallparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AApropertycallparameters4PropertyCallParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPropertyCallParameters ppropertycallparametersNode1;
        {
            // Block
        TLPar tlparNode2;
        PDeclarator pdeclaratorNode3;
        PActualParameterList pactualparameterlistNode4;
        TRPar trparNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pdeclaratorNode3 = (PDeclarator)nodeArrayList2.get(0);
        pactualparameterlistNode4 = (PActualParameterList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        ppropertycallparametersNode1 = new APropertyCallParameters(tlparNode2, pdeclaratorNode3, pactualparameterlistNode4, trparNode5);
        }
	nodeList.add(ppropertycallparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AAactualparameterlist1ActualParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PActualParameterList pactualparameterlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pactualparameterlistNode1 = new AActualParameterList(pexpressionNode2, listNode3);
        }
	nodeList.add(pactualparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AAactualparameterlist2ActualParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PActualParameterList pactualparameterlistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pactualparameterlistNode1 = new AActualParameterList(pexpressionNode2, listNode4);
        }
	nodeList.add(pactualparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANextExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextExpr pnextexprNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pnextexprNode1 = new ANextExpr(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pnextexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAconcretedeclarator1Declarator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarator pdeclaratorNode1;
        {
            // Block
        PActualParameterList pactualparameterlistNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TBar tbarNode5;
        pactualparameterlistNode2 = (PActualParameterList)nodeArrayList1.get(0);
        tbarNode5 = (TBar)nodeArrayList2.get(0);

        pdeclaratorNode1 = new AConcreteDeclarator(pactualparameterlistNode2, null, null, tbarNode5);
        }
	nodeList.add(pdeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAconcretedeclarator2Declarator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarator pdeclaratorNode1;
        {
            // Block
        PActualParameterList pactualparameterlistNode2;
        PSimpleTypePostfix psimpletypepostfixNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TBar tbarNode5;
        pactualparameterlistNode2 = (PActualParameterList)nodeArrayList1.get(0);
        psimpletypepostfixNode3 = (PSimpleTypePostfix)nodeArrayList2.get(0);
        tbarNode5 = (TBar)nodeArrayList3.get(0);

        pdeclaratorNode1 = new AConcreteDeclarator(pactualparameterlistNode2, psimpletypepostfixNode3, null, tbarNode5);
        }
	nodeList.add(pdeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AAconcretedeclarator3Declarator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarator pdeclaratorNode1;
        {
            // Block
        PActualParameterList pactualparameterlistNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PAccumulator paccumulatorNode4;
        TBar tbarNode5;
        pactualparameterlistNode2 = (PActualParameterList)nodeArrayList1.get(0);
        paccumulatorNode4 = (PAccumulator)nodeArrayList2.get(0);
        tbarNode5 = (TBar)nodeArrayList3.get(0);

        pdeclaratorNode1 = new AConcreteDeclarator(pactualparameterlistNode2, null, paccumulatorNode4, tbarNode5);
        }
	nodeList.add(pdeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AAconcretedeclarator4Declarator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarator pdeclaratorNode1;
        {
            // Block
        PActualParameterList pactualparameterlistNode2;
        PSimpleTypePostfix psimpletypepostfixNode3;
        PAccumulator paccumulatorNode4;
        TBar tbarNode5;
        pactualparameterlistNode2 = (PActualParameterList)nodeArrayList1.get(0);
        psimpletypepostfixNode3 = (PSimpleTypePostfix)nodeArrayList2.get(0);
        paccumulatorNode4 = (PAccumulator)nodeArrayList3.get(0);
        tbarNode5 = (TBar)nodeArrayList4.get(0);

        pdeclaratorNode1 = new AConcreteDeclarator(pactualparameterlistNode2, psimpletypepostfixNode3, paccumulatorNode4, tbarNode5);
        }
	nodeList.add(pdeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AAccumulator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAccumulator paccumulatorNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PName pnameNode3;
        TColon tcolonNode4;
        PTypeSpecifier ptypespecifierNode5;
        TEqual tequalNode6;
        PExpression pexpressionNode7;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pnameNode3 = (PName)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypespecifierNode5 = (PTypeSpecifier)nodeArrayList4.get(0);
        tequalNode6 = (TEqual)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);

        paccumulatorNode1 = new AAccumulator(tsemicolonNode2, pnameNode3, tcolonNode4, ptypespecifierNode5, tequalNode6, pexpressionNode7);
        }
	nodeList.add(paccumulatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AAnamelist1NameList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNameList pnamelistNode1;
        {
            // Block
        PName pnameNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pnameNode2 = (PName)nodeArrayList1.get(0);
        {
            // Block
        }

        pnamelistNode1 = new ANameList(pnameNode2, listNode3);
        }
	nodeList.add(pnamelistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AAnamelist2NameList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNameList pnamelistNode1;
        {
            // Block
        PName pnameNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pnameNode2 = (PName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pnamelistNode1 = new ANameList(pnameNode2, listNode4);
        }
	nodeList.add(pnamelistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ANextName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextName pnextnameNode1;
        {
            // Block
        TComma tcommaNode2;
        PName pnameNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pnameNode3 = (PName)nodeArrayList2.get(0);

        pnextnameNode1 = new ANextName(tcommaNode2, pnameNode3);
        }
	nodeList.add(pnextnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ASimpleTypePostfix */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleTypePostfix psimpletypepostfixNode1;
        {
            // Block
        TColon tcolonNode2;
        PSimpleTypeSpecifier psimpletypespecifierNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        psimpletypespecifierNode3 = (PSimpleTypeSpecifier)nodeArrayList2.get(0);

        psimpletypepostfixNode1 = new ASimpleTypePostfix(tcolonNode2, psimpletypespecifierNode3);
        }
	nodeList.add(psimpletypepostfixNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AQualifiers */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PQualifiers pqualifiersNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PActualParameterList pactualparameterlistNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pactualparameterlistNode3 = (PActualParameterList)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        pqualifiersNode1 = new AQualifiers(tlbracketNode2, pactualparameterlistNode3, trbracketNode4);
        }
	nodeList.add(pqualifiersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ALogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalOperator plogicaloperatorNode1;
        {
            // Block
        PBooleanOperator pbooleanoperatorNode2;
        pbooleanoperatorNode2 = (PBooleanOperator)nodeArrayList1.get(0);

        plogicaloperatorNode1 = new ALogicalOperator(pbooleanoperatorNode2);
        }
	nodeList.add(plogicaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AImplicativeLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicalOperator plogicaloperatorNode1;
        {
            // Block
        PImpliesOperator pimpliesoperatorNode2;
        pimpliesoperatorNode2 = (PImpliesOperator)nodeArrayList1.get(0);

        plogicaloperatorNode1 = new AImplicativeLogicalOperator(pimpliesoperatorNode2);
        }
	nodeList.add(plogicaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce AAndBooleanOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanOperator pbooleanoperatorNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        pbooleanoperatorNode1 = new AAndBooleanOperator(tandNode2);
        }
	nodeList.add(pbooleanoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AOrBooleanOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanOperator pbooleanoperatorNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        pbooleanoperatorNode1 = new AOrBooleanOperator(torNode2);
        }
	nodeList.add(pbooleanoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce AXorBooleanOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanOperator pbooleanoperatorNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        pbooleanoperatorNode1 = new AXorBooleanOperator(txorNode2);
        }
	nodeList.add(pbooleanoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce AImpliesOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImpliesOperator pimpliesoperatorNode1;
        {
            // Block
        TImplies timpliesNode2;
        timpliesNode2 = (TImplies)nodeArrayList1.get(0);

        pimpliesoperatorNode1 = new AImpliesOperator(timpliesNode2);
        }
	nodeList.add(pimpliesoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce AEqualityRelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalOperator prelationaloperatorNode1;
        {
            // Block
        PEquationOperator pequationoperatorNode2;
        pequationoperatorNode2 = (PEquationOperator)nodeArrayList1.get(0);

        prelationaloperatorNode1 = new AEqualityRelationalOperator(pequationoperatorNode2);
        }
	nodeList.add(prelationaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ACompareRelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalOperator prelationaloperatorNode1;
        {
            // Block
        PCompareOperator pcompareoperatorNode2;
        pcompareoperatorNode2 = (PCompareOperator)nodeArrayList1.get(0);

        prelationaloperatorNode1 = new ACompareRelationalOperator(pcompareoperatorNode2);
        }
	nodeList.add(prelationaloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce AEquationOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEquationOperator pequationoperatorNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pequationoperatorNode1 = new AEquationOperator(tequalNode2);
        }
	nodeList.add(pequationoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce AInEquationOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEquationOperator pequationoperatorNode1;
        {
            // Block
        TNEqual tnequalNode2;
        tnequalNode2 = (TNEqual)nodeArrayList1.get(0);

        pequationoperatorNode1 = new AInEquationOperator(tnequalNode2);
        }
	nodeList.add(pequationoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce AGtCompareOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompareOperator pcompareoperatorNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pcompareoperatorNode1 = new AGtCompareOperator(tgtNode2);
        }
	nodeList.add(pcompareoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ALtCompareOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompareOperator pcompareoperatorNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pcompareoperatorNode1 = new ALtCompareOperator(tltNode2);
        }
	nodeList.add(pcompareoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce AGteqCompareOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompareOperator pcompareoperatorNode1;
        {
            // Block
        TGteq tgteqNode2;
        tgteqNode2 = (TGteq)nodeArrayList1.get(0);

        pcompareoperatorNode1 = new AGteqCompareOperator(tgteqNode2);
        }
	nodeList.add(pcompareoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ALteqCompareOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompareOperator pcompareoperatorNode1;
        {
            // Block
        TLteq tlteqNode2;
        tlteqNode2 = (TLteq)nodeArrayList1.get(0);

        pcompareoperatorNode1 = new ALteqCompareOperator(tlteqNode2);
        }
	nodeList.add(pcompareoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce APlusAddOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddOperator paddoperatorNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        paddoperatorNode1 = new APlusAddOperator(tplusNode2);
        }
	nodeList.add(paddoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce AMinusAddOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddOperator paddoperatorNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        paddoperatorNode1 = new AMinusAddOperator(tminusNode2);
        }
	nodeList.add(paddoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce AMultMultiplyOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplyOperator pmultiplyoperatorNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        pmultiplyoperatorNode1 = new AMultMultiplyOperator(tmultNode2);
        }
	nodeList.add(pmultiplyoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ADivMultiplyOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplyOperator pmultiplyoperatorNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        pmultiplyoperatorNode1 = new ADivMultiplyOperator(tdivNode2);
        }
	nodeList.add(pmultiplyoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce AMinusUnaryOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOperator punaryoperatorNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        punaryoperatorNode1 = new AMinusUnaryOperator(tminusNode2);
        }
	nodeList.add(punaryoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ANotUnaryOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOperator punaryoperatorNode1;
        {
            // Block
        TNot tnotNode2;
        tnotNode2 = (TNot)nodeArrayList1.get(0);

        punaryoperatorNode1 = new ANotUnaryOperator(tnotNode2);
        }
	nodeList.add(punaryoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce AOclAnyTypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpecifier ptypespecifierNode1;
        {
            // Block
        PSimpleTypeSpecifier psimpletypespecifierNode2;
        psimpletypespecifierNode2 = (PSimpleTypeSpecifier)nodeArrayList1.get(0);

        ptypespecifierNode1 = new AOclAnyTypeSpecifier(psimpletypespecifierNode2);
        }
	nodeList.add(ptypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ACollectionTypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpecifier ptypespecifierNode1;
        {
            // Block
        PCollectionType pcollectiontypeNode2;
        pcollectiontypeNode2 = (PCollectionType)nodeArrayList1.get(0);

        ptypespecifierNode1 = new ACollectionTypeSpecifier(pcollectiontypeNode2);
        }
	nodeList.add(ptypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce ASimpleTypeSpecifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleTypeSpecifier psimpletypespecifierNode1;
        {
            // Block
        PPathName ppathnameNode2;
        ppathnameNode2 = (PPathName)nodeArrayList1.get(0);

        psimpletypespecifierNode1 = new ASimpleTypeSpecifier(ppathnameNode2);
        }
	nodeList.add(psimpletypespecifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce ACollectionType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollectionType pcollectiontypeNode1;
        {
            // Block
        PCollectionKind pcollectionkindNode2;
        TLPar tlparNode3;
        PSimpleTypeSpecifier psimpletypespecifierNode4;
        TRPar trparNode5;
        pcollectionkindNode2 = (PCollectionKind)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        psimpletypespecifierNode4 = (PSimpleTypeSpecifier)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pcollectiontypeNode1 = new ACollectionType(pcollectionkindNode2, tlparNode3, psimpletypespecifierNode4, trparNode5);
        }
	nodeList.add(pcollectiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce ASetCollectionKind */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollectionKind pcollectionkindNode1;
        {
            // Block
        TSet tsetNode2;
        tsetNode2 = (TSet)nodeArrayList1.get(0);

        pcollectionkindNode1 = new ASetCollectionKind(tsetNode2);
        }
	nodeList.add(pcollectionkindNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce ABagCollectionKind */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollectionKind pcollectionkindNode1;
        {
            // Block
        TBag tbagNode2;
        tbagNode2 = (TBag)nodeArrayList1.get(0);

        pcollectionkindNode1 = new ABagCollectionKind(tbagNode2);
        }
	nodeList.add(pcollectionkindNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce ASequenceCollectionKind */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollectionKind pcollectionkindNode1;
        {
            // Block
        TSequence tsequenceNode2;
        tsequenceNode2 = (TSequence)nodeArrayList1.get(0);

        pcollectionkindNode1 = new ASequenceCollectionKind(tsequenceNode2);
        }
	nodeList.add(pcollectionkindNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce ACollectionKind */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollectionKind pcollectionkindNode1;
        {
            // Block
        TCollection tcollectionNode2;
        tcollectionNode2 = (TCollection)nodeArrayList1.get(0);

        pcollectionkindNode1 = new ACollectionKind(tcollectionNode2);
        }
	nodeList.add(pcollectionkindNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce ALiteralCollection */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteralCollection pliteralcollectionNode1;
        {
            // Block
        PCollectionKind pcollectionkindNode2;
        TLBrace tlbraceNode3;
        PCollectionItemList pcollectionitemlistNode4;
        TRBrace trbraceNode5;
        pcollectionkindNode2 = (PCollectionKind)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        pcollectionitemlistNode4 = (PCollectionItemList)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        pliteralcollectionNode1 = new ALiteralCollection(pcollectionkindNode2, tlbraceNode3, pcollectionitemlistNode4, trbraceNode5);
        }
	nodeList.add(pliteralcollectionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new126() /* reduce AAcollectionitemlist1CollectionItemList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollectionItemList pcollectionitemlistNode1;
        {
            // Block
        PCollectionItem pcollectionitemNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pcollectionitemNode2 = (PCollectionItem)nodeArrayList1.get(0);
        {
            // Block
        }

        pcollectionitemlistNode1 = new ACollectionItemList(pcollectionitemNode2, listNode3);
        }
	nodeList.add(pcollectionitemlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new127() /* reduce AAcollectionitemlist2CollectionItemList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollectionItemList pcollectionitemlistNode1;
        {
            // Block
        PCollectionItem pcollectionitemNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pcollectionitemNode2 = (PCollectionItem)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcollectionitemlistNode1 = new ACollectionItemList(pcollectionitemNode2, listNode4);
        }
	nodeList.add(pcollectionitemlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new128() /* reduce ANextCollectionItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextCollectionItem pnextcollectionitemNode1;
        {
            // Block
        TComma tcommaNode2;
        PCollectionItem pcollectionitemNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pcollectionitemNode3 = (PCollectionItem)nodeArrayList2.get(0);

        pnextcollectionitemNode1 = new ANextCollectionItem(tcommaNode2, pcollectionitemNode3);
        }
	nodeList.add(pnextcollectionitemNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new129() /* reduce AAcollectionitem1CollectionItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollectionItem pcollectionitemNode1;
        {
            // Block
        PExpression pexpressionNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pcollectionitemNode1 = new ACollectionItem(pexpressionNode2, null);
        }
	nodeList.add(pcollectionitemNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new130() /* reduce AAcollectionitem2CollectionItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCollectionItem pcollectionitemNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PRange prangeNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        prangeNode3 = (PRange)nodeArrayList2.get(0);

        pcollectionitemNode1 = new ACollectionItem(pexpressionNode2, prangeNode3);
        }
	nodeList.add(pcollectionitemNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new131() /* reduce ARange */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRange prangeNode1;
        {
            // Block
        TDdot tddotNode2;
        PExpression pexpressionNode3;
        tddotNode2 = (TDdot)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        prangeNode1 = new ARange(tddotNode2, pexpressionNode3);
        }
	nodeList.add(prangeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new132() /* reduce AStringLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AStringLiteral(tstringliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new133() /* reduce ANumberLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TNumberLiteral tnumberliteralNode2;
        tnumberliteralNode2 = (TNumberLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ANumberLiteral(tnumberliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new134() /* reduce ABooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TBooleanLiteral tbooleanliteralNode2;
        tbooleanliteralNode2 = (TBooleanLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ABooleanLiteral(tbooleanliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new135() /* reduce AName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PName pnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pnameNode1 = new AName(tidentifierNode2);
        }
	nodeList.add(pnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new136() /* reduce AApathname1PathName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPathName ppathnameNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PName pnameNode3;
        {
            // Block
        }
        pnameNode3 = (PName)nodeArrayList1.get(0);

        ppathnameNode1 = new APathName(listNode2, pnameNode3);
        }
	nodeList.add(ppathnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new137() /* reduce AApathname2PathName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPathName ppathnameNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PName pnameNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pnameNode4 = (PName)nodeArrayList2.get(0);

        ppathnameNode1 = new APathName(listNode3, pnameNode4);
        }
	nodeList.add(ppathnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new138() /* reduce ANameQualifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNameQualifier pnamequalifierNode1;
        {
            // Block
        PName pnameNode2;
        TDcolon tdcolonNode3;
        pnameNode2 = (PName)nodeArrayList1.get(0);
        tdcolonNode3 = (TDcolon)nodeArrayList2.get(0);

        pnamequalifierNode1 = new ANameQualifier(pnameNode2, tdcolonNode3);
        }
	nodeList.add(pnamequalifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new139() /* reduce ATerminal$Constraint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PConstraint pconstraintNode1;
        pconstraintNode1 = (PConstraint)nodeArrayList1.get(0);
	if(pconstraintNode1 != null)
	{
	  listNode2.add(pconstraintNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new140() /* reduce ANonTerminal$Constraint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PConstraint pconstraintNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pconstraintNode2 = (PConstraint)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconstraintNode2 != null)
	{
	  listNode3.add(pconstraintNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new141() /* reduce ATerminal$ContextBodypart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PContextBodypart pcontextbodypartNode1;
        pcontextbodypartNode1 = (PContextBodypart)nodeArrayList1.get(0);
	if(pcontextbodypartNode1 != null)
	{
	  listNode2.add(pcontextbodypartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new142() /* reduce ANonTerminal$ContextBodypart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PContextBodypart pcontextbodypartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcontextbodypartNode2 = (PContextBodypart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcontextbodypartNode2 != null)
	{
	  listNode3.add(pcontextbodypartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new143() /* reduce ATerminal$LetExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLetExpression pletexpressionNode1;
        pletexpressionNode1 = (PLetExpression)nodeArrayList1.get(0);
	if(pletexpressionNode1 != null)
	{
	  listNode2.add(pletexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new144() /* reduce ANonTerminal$LetExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLetExpression pletexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pletexpressionNode2 = (PLetExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pletexpressionNode2 != null)
	{
	  listNode3.add(pletexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new145() /* reduce ATerminal$NextParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNextParam pnextparamNode1;
        pnextparamNode1 = (PNextParam)nodeArrayList1.get(0);
	if(pnextparamNode1 != null)
	{
	  listNode2.add(pnextparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new146() /* reduce ANonTerminal$NextParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNextParam pnextparamNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextparamNode2 = (PNextParam)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextparamNode2 != null)
	{
	  listNode3.add(pnextparamNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new147() /* reduce ATerminal$Implication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PImplication pimplicationNode1;
        pimplicationNode1 = (PImplication)nodeArrayList1.get(0);
	if(pimplicationNode1 != null)
	{
	  listNode2.add(pimplicationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new148() /* reduce ANonTerminal$Implication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PImplication pimplicationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pimplicationNode2 = (PImplication)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pimplicationNode2 != null)
	{
	  listNode3.add(pimplicationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new149() /* reduce ATerminal$BooleanOperation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBooleanOperation pbooleanoperationNode1;
        pbooleanoperationNode1 = (PBooleanOperation)nodeArrayList1.get(0);
	if(pbooleanoperationNode1 != null)
	{
	  listNode2.add(pbooleanoperationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new150() /* reduce ANonTerminal$BooleanOperation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBooleanOperation pbooleanoperationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbooleanoperationNode2 = (PBooleanOperation)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbooleanoperationNode2 != null)
	{
	  listNode3.add(pbooleanoperationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new151() /* reduce ATerminal$Addition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAddition padditionNode1;
        padditionNode1 = (PAddition)nodeArrayList1.get(0);
	if(padditionNode1 != null)
	{
	  listNode2.add(padditionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new152() /* reduce ANonTerminal$Addition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAddition padditionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionNode2 = (PAddition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionNode2 != null)
	{
	  listNode3.add(padditionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new153() /* reduce ATerminal$Multiplication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMultiplication pmultiplicationNode1;
        pmultiplicationNode1 = (PMultiplication)nodeArrayList1.get(0);
	if(pmultiplicationNode1 != null)
	{
	  listNode2.add(pmultiplicationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new154() /* reduce ANonTerminal$Multiplication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMultiplication pmultiplicationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultiplicationNode2 = (PMultiplication)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultiplicationNode2 != null)
	{
	  listNode3.add(pmultiplicationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new155() /* reduce ATerminal$PropertyInvocation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPropertyInvocation ppropertyinvocationNode1;
        ppropertyinvocationNode1 = (PPropertyInvocation)nodeArrayList1.get(0);
	if(ppropertyinvocationNode1 != null)
	{
	  listNode2.add(ppropertyinvocationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new156() /* reduce ANonTerminal$PropertyInvocation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPropertyInvocation ppropertyinvocationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppropertyinvocationNode2 = (PPropertyInvocation)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppropertyinvocationNode2 != null)
	{
	  listNode3.add(ppropertyinvocationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new157() /* reduce ATerminal$NextExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNextExpr pnextexprNode1;
        pnextexprNode1 = (PNextExpr)nodeArrayList1.get(0);
	if(pnextexprNode1 != null)
	{
	  listNode2.add(pnextexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new158() /* reduce ANonTerminal$NextExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNextExpr pnextexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextexprNode2 = (PNextExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextexprNode2 != null)
	{
	  listNode3.add(pnextexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new159() /* reduce ATerminal$NextName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNextName pnextnameNode1;
        pnextnameNode1 = (PNextName)nodeArrayList1.get(0);
	if(pnextnameNode1 != null)
	{
	  listNode2.add(pnextnameNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new160() /* reduce ANonTerminal$NextName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNextName pnextnameNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextnameNode2 = (PNextName)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextnameNode2 != null)
	{
	  listNode3.add(pnextnameNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new161() /* reduce ATerminal$NextCollectionItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNextCollectionItem pnextcollectionitemNode1;
        pnextcollectionitemNode1 = (PNextCollectionItem)nodeArrayList1.get(0);
	if(pnextcollectionitemNode1 != null)
	{
	  listNode2.add(pnextcollectionitemNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new162() /* reduce ANonTerminal$NextCollectionItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNextCollectionItem pnextcollectionitemNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextcollectionitemNode2 = (PNextCollectionItem)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextcollectionitemNode2 != null)
	{
	  listNode3.add(pnextcollectionitemNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new163() /* reduce ATerminal$NameQualifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNameQualifier pnamequalifierNode1;
        pnamequalifierNode1 = (PNameQualifier)nodeArrayList1.get(0);
	if(pnamequalifierNode1 != null)
	{
	  listNode2.add(pnamequalifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new164() /* reduce ANonTerminal$NameQualifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNameQualifier pnamequalifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnamequalifierNode2 = (PNameQualifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnamequalifierNode2 != null)
	{
	  listNode3.add(pnamequalifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {11, SHIFT, 1}, },
			{{-1, ERROR, 1}, {48, SHIFT, 6}, },
			{{-1, ERROR, 2}, {49, ACCEPT, -1}, },
			{{-1, REDUCE, 139}, },
			{{-1, ERROR, 4}, {12, SHIFT, 9}, {13, SHIFT, 10}, {14, SHIFT, 11}, {15, SHIFT, 12}, },
			{{-1, REDUCE, 1}, {11, SHIFT, 1}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 12}, {33, SHIFT, 17}, {34, SHIFT, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 12}, {34, SHIFT, 20}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 141}, },
			{{-1, ERROR, 14}, {34, SHIFT, 22}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 2}, {12, SHIFT, 9}, {13, SHIFT, 10}, {14, SHIFT, 11}, {15, SHIFT, 12}, },
			{{-1, REDUCE, 140}, },
			{{-1, ERROR, 17}, {7, SHIFT, 25}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {16, SHIFT, 29}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {20, SHIFT, 33}, {21, SHIFT, 34}, {22, SHIFT, 35}, {23, SHIFT, 36}, {24, SHIFT, 37}, {25, SHIFT, 38}, {48, SHIFT, 6}, },
			{{-1, ERROR, 18}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 3}, {44, SHIFT, 50}, },
			{{-1, ERROR, 21}, {34, SHIFT, 53}, },
			{{-1, ERROR, 22}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {44, SHIFT, 50}, {45, SHIFT, 63}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, ERROR, 23}, {34, SHIFT, 89}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 39}, {26, SHIFT, 90}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 50}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 5}, {44, SHIFT, 50}, },
			{{-1, REDUCE, 4}, {44, SHIFT, 50}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 115}, },
			{{-1, ERROR, 60}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, ERROR, 61}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 67}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, {25, SHIFT, 38}, },
			{{-1, REDUCE, 45}, {22, SHIFT, 35}, {23, SHIFT, 36}, {24, SHIFT, 37}, },
			{{-1, REDUCE, 48}, {16, SHIFT, 29}, {17, SHIFT, 30}, },
			{{-1, REDUCE, 51}, {18, SHIFT, 31}, {19, SHIFT, 32}, {20, SHIFT, 33}, {21, SHIFT, 34}, },
			{{-1, REDUCE, 54}, {9, SHIFT, 27}, {10, SHIFT, 28}, },
			{{-1, REDUCE, 57}, {7, SHIFT, 25}, {8, SHIFT, 26}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, {4, SHIFT, 113}, {5, SHIFT, 114}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 80}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, ERROR, 81}, {30, SHIFT, 118}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 136}, {33, SHIFT, 119}, },
			{{-1, REDUCE, 72}, {26, SHIFT, 120}, {28, SHIFT, 121}, {36, SHIFT, 122}, },
			{{-1, REDUCE, 163}, },
			{{-1, ERROR, 87}, {44, SHIFT, 50}, {45, SHIFT, 126}, },
			{{-1, ERROR, 88}, {48, SHIFT, 6}, },
			{{-1, ERROR, 89}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {44, SHIFT, 50}, {45, SHIFT, 63}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 24}, {48, SHIFT, 6}, },
			{{-1, ERROR, 91}, {16, SHIFT, 134}, {26, SHIFT, 135}, {34, SHIFT, 136}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 6}, {44, SHIFT, 50}, },
			{{-1, ERROR, 94}, {27, SHIFT, 139}, },
			{{-1, ERROR, 95}, {40, SHIFT, 140}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 147}, },
			{{-1, ERROR, 98}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 43}, {25, SHIFT, 38}, },
			{{-1, REDUCE, 149}, },
			{{-1, ERROR, 101}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 46}, {22, SHIFT, 35}, {23, SHIFT, 36}, {24, SHIFT, 37}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 104}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 106}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 151}, },
			{{-1, ERROR, 108}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 55}, {9, SHIFT, 27}, {10, SHIFT, 28}, },
			{{-1, REDUCE, 153}, },
			{{-1, ERROR, 111}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 58}, {7, SHIFT, 25}, {8, SHIFT, 26}, },
			{{-1, ERROR, 113}, {48, SHIFT, 6}, },
			{{-1, ERROR, 114}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 63}, {4, SHIFT, 113}, {5, SHIFT, 114}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 118}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 138}, },
			{{-1, ERROR, 120}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {27, SHIFT, 157}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, ERROR, 121}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, ERROR, 122}, {12, SHIFT, 162}, },
			{{-1, REDUCE, 73}, {26, SHIFT, 120}, {28, SHIFT, 121}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 74}, {26, SHIFT, 120}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 137}, {33, SHIFT, 119}, },
			{{-1, REDUCE, 164}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 130}, {27, SHIFT, 166}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, {35, SHIFT, 167}, },
			{{-1, ERROR, 133}, {34, SHIFT, 136}, },
			{{-1, ERROR, 134}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 24}, {48, SHIFT, 6}, },
			{{-1, ERROR, 136}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {48, SHIFT, 6}, },
			{{-1, ERROR, 137}, {16, SHIFT, 178}, {34, SHIFT, 136}, },
			{{-1, ERROR, 138}, {16, SHIFT, 180}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 140}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 152}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 154}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 156}, },
			{{-1, REDUCE, 129}, {38, SHIFT, 182}, },
			{{-1, ERROR, 155}, {31, SHIFT, 184}, },
			{{-1, REDUCE, 126}, {35, SHIFT, 185}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 84}, {35, SHIFT, 188}, },
			{{-1, ERROR, 159}, {27, SHIFT, 191}, {32, SHIFT, 192}, {34, SHIFT, 193}, {37, SHIFT, 194}, },
			{{-1, ERROR, 160}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {27, SHIFT, 197}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, ERROR, 161}, {29, SHIFT, 199}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 75}, {26, SHIFT, 120}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 10}, {34, SHIFT, 201}, },
			{{-1, ERROR, 167}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 27}, {35, SHIFT, 167}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 172}, {27, SHIFT, 205}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 118}, },
			{{-1, ERROR, 176}, {26, SHIFT, 206}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 178}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, ERROR, 179}, {16, SHIFT, 208}, },
			{{-1, ERROR, 180}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, ERROR, 181}, {41, SHIFT, 210}, },
			{{-1, ERROR, 182}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 125}, },
			{{-1, ERROR, 185}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 127}, {35, SHIFT, 185}, },
			{{-1, ERROR, 188}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 85}, {35, SHIFT, 188}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 192}, {48, SHIFT, 6}, },
			{{-1, ERROR, 193}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 195}, {37, SHIFT, 218}, },
			{{-1, ERROR, 196}, {32, SHIFT, 192}, {37, SHIFT, 219}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 198}, {27, SHIFT, 221}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 201}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 206}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 208}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 210}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 158}, },
			{{-1, ERROR, 216}, {34, SHIFT, 226}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 220}, {37, SHIFT, 227}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 223}, {27, SHIFT, 228}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 225}, {42, SHIFT, 229}, },
			{{-1, ERROR, 226}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 230}, {16, SHIFT, 231}, },
			{{-1, ERROR, 231}, {0, SHIFT, 54}, {1, SHIFT, 55}, {2, SHIFT, 56}, {3, SHIFT, 57}, {6, SHIFT, 58}, {10, SHIFT, 59}, {26, SHIFT, 60}, {39, SHIFT, 61}, {43, SHIFT, 62}, {46, SHIFT, 64}, {47, SHIFT, 65}, {48, SHIFT, 6}, },
			{{-1, REDUCE, 91}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {5, 16}, },
			{{-1, 13}, {15, 24}, },
			{{-1, 4}, },
			{{-1, 7}, },
			{{-1, 202}, },
			{{-1, 19}, },
			{{-1, 14}, },
			{{-1, 39}, },
			{{-1, 130}, {135, 172}, },
			{{-1, 131}, },
			{{-1, 132}, {167, 203}, },
			{{-1, 168}, {169, 204}, },
			{{-1, 66}, {89, 129}, },
			{{-1, 67}, },
			{{-1, 51}, {52, 92}, {87, 92}, {93, 92}, },
			{{-1, 137}, },
			{{-1, 138}, {133, 170}, {137, 179}, },
			{{-1, 68}, },
			{{-1, 158}, {22, 69}, {60, 94}, {61, 95}, {67, 96}, {89, 69}, {118, 154}, {134, 171}, {140, 181}, {178, 207}, {180, 209}, {182, 211}, {185, 154}, {188, 214}, {208, 224}, {210, 225}, {231, 232}, },
			{{-1, 70}, },
			{{-1, 97}, {99, 142}, },
			{{-1, 71}, {98, 141}, },
			{{-1, 100}, {102, 144}, },
			{{-1, 72}, {101, 143}, },
			{{-1, 103}, },
			{{-1, 73}, {104, 145}, },
			{{-1, 105}, },
			{{-1, 74}, {106, 146}, },
			{{-1, 107}, {109, 148}, },
			{{-1, 75}, {108, 147}, },
			{{-1, 110}, {112, 150}, },
			{{-1, 76}, {111, 149}, },
			{{-1, 77}, {80, 117}, },
			{{-1, 115}, {116, 153}, },
			{{-1, 78}, },
			{{-1, 123}, },
			{{-1, 79}, {113, 151}, {114, 152}, },
			{{-1, 124}, {123, 163}, {125, 165}, {164, 200}, },
			{{-1, 159}, {121, 161}, {160, 198}, },
			{{-1, 189}, {190, 215}, },
			{{-1, 160}, },
			{{-1, 195}, {196, 220}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 196}, },
			{{-1, 125}, {123, 164}, },
			{{-1, 40}, },
			{{-1, 101}, {17, 41}, },
			{{-1, 98}, {17, 42}, },
			{{-1, 43}, },
			{{-1, 44}, {73, 104}, },
			{{-1, 45}, {74, 106}, },
			{{-1, 108}, {17, 46}, },
			{{-1, 111}, {17, 47}, },
			{{-1, 80}, },
			{{-1, 173}, {201, 222}, {226, 230}, },
			{{-1, 174}, {193, 217}, {206, 223}, },
			{{-1, 175}, },
			{{-1, 81}, {136, 176}, {201, 176}, {226, 176}, },
			{{-1, 82}, },
			{{-1, 155}, },
			{{-1, 186}, {187, 213}, },
			{{-1, 156}, {185, 212}, },
			{{-1, 183}, },
			{{-1, 83}, },
			{{-1, 84}, {1, 8}, {12, 21}, {14, 23}, {17, 48}, {18, 49}, {50, 91}, {88, 127}, {90, 133}, {135, 133}, {167, 133}, {192, 216}, },
			{{-1, 85}, {136, 177}, {193, 177}, {201, 177}, {206, 177}, {226, 177}, },
			{{-1, 86}, {88, 128}, },
			{{-1, 5}, },
			{{-1, 15}, },
			{{-1, 87}, {20, 52}, {53, 93}, },
			{{-1, 169}, },
			{{-1, 99}, },
			{{-1, 102}, },
			{{-1, 109}, },
			{{-1, 112}, },
			{{-1, 116}, },
			{{-1, 190}, },
			{{-1, -1}, },
			{{-1, 187}, },
			{{-1, 88}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'context', EOF",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'pre', 'post', 'inv', 'def'",
			"expecting: '.', '->', '*', '/', '+', '-', 'context', 'pre', 'post', 'inv', 'def', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', '(', ')', '[', ']', '}', ';', '::', ':', ',', '@', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: 'pre', 'post', 'inv', 'def', '::', ':'",
			"expecting: ':', identifier",
			"expecting: 'context', 'pre', 'post', 'inv', 'def', EOF",
			"expecting: '*', '/', '+', '-', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', identifier",
			"expecting: 'context', 'pre', 'post', 'inv', 'def', 'let', EOF",
			"expecting: ':'",
			"expecting: 'Set', 'Bag', 'Sequence', 'Collection', 'not', '-', '(', 'if', boolean literal, 'let', 'in', number literal, string literal, identifier",
			"expecting: 'Set', 'Bag', 'Sequence', 'Collection', 'not', '-', '(', 'if', boolean literal, number literal, string literal, identifier",
			"expecting: '('",
			"expecting: 'context', 'pre', 'post', 'inv', 'def', 'let', 'in', EOF",
			"expecting: '(', '{'",
			"expecting: 'Set', 'Bag', 'Sequence', 'Collection', '(', 'if', boolean literal, number literal, string literal, identifier",
			"expecting: '.', '->', '*', '/', '+', '-', 'context', 'pre', 'post', 'inv', 'def', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: 'context', 'pre', 'post', 'inv', 'def', ')', ']', '}', ';', ':', ',', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: 'context', 'pre', 'post', 'inv', 'def', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: 'context', 'pre', 'post', 'inv', 'def', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: 'context', 'pre', 'post', 'inv', 'def', '=', '<>', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: 'context', 'pre', 'post', 'inv', 'def', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: '+', '-', 'context', 'pre', 'post', 'inv', 'def', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: '*', '/', '+', '-', 'context', 'pre', 'post', 'inv', 'def', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', ')', ']', '}', ';', ':', ',', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: '{'",
			"expecting: '.', '->', '*', '/', '+', '-', 'context', 'pre', 'post', 'inv', 'def', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', '(', ')', '[', ']', '}', ';', ':', ',', '@', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: 'let', 'in'",
			"expecting: ')', identifier",
			"expecting: '=', '(', ':'",
			"expecting: ')'",
			"expecting: 'then'",
			"expecting: 'Set', 'Bag', 'Sequence', 'Collection', 'not', '-', '(', ')', 'if', boolean literal, number literal, string literal, identifier",
			"expecting: 'pre'",
			"expecting: '.', '->', '*', '/', '+', '-', 'context', 'pre', 'post', 'inv', 'def', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', '(', ')', '[', ']', '}', ';', ':', ',', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: '.', '->', '*', '/', '+', '-', 'context', 'pre', 'post', 'inv', 'def', '=', '<>', '<', '>', '<=', '>=', 'and', 'or', 'xor', 'implies', '(', ')', ']', '}', ';', ':', ',', '|', '..', 'then', 'else', 'endif', 'let', 'in', EOF",
			"expecting: ')', ','",
			"expecting: 'Set', 'Bag', 'Sequence', 'Collection', identifier",
			"expecting: '=', ':'",
			"expecting: '='",
			"expecting: '}', ',', '..'",
			"expecting: '}'",
			"expecting: '}', ','",
			"expecting: ')', ']', ';', ':', ',', '|'",
			"expecting: ')', ';', ':', '|'",
			"expecting: ']'",
			"expecting: 'pre', 'post', 'inv', 'def', ':'",
			"expecting: '=', ')', ','",
			"expecting: 'pre', 'post', 'inv', 'def', '=', ')', ','",
			"expecting: 'pre', 'post', 'inv', 'def', '=', ')', ';', ',', '|'",
			"expecting: 'else'",
			"expecting: '|'",
			"expecting: ';', '|'",
			"expecting: 'endif'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 0, 3, 0, 4, 3, 5, 6, 6, 6, 6, 7, 6, 7, 0, 8, 1, 3, 9, 10, 11, 10, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 3, 1, 14, 9, 9, 15, 15, 15, 15, 16, 16, 12, 12, 17, 12, 17, 17, 7, 12, 17, 7, 18, 19, 20, 21, 22, 23, 24, 24, 17, 17, 16, 25, 17, 17, 4, 26, 1, 27, 1, 11, 28, 29, 14, 9, 30, 31, 7, 19, 12, 19, 20, 12, 20, 20, 12, 21, 12, 23, 12, 23, 24, 12, 24, 1, 1, 17, 17, 24, 12, 1, 32, 12, 33, 34, 17, 35, 12, 4, 1, 7, 30, 30, 36, 10, 12, 28, 37, 38, 39, 17, 12, 19, 19, 20, 20, 20, 21, 23, 23, 24, 24, 17, 17, 17, 40, 41, 42, 17, 43, 44, 32, 45, 34, 17, 35, 17, 46, 1, 36, 36, 36, 14, 30, 47, 48, 48, 13, 49, 12, 39, 12, 50, 12, 42, 17, 12, 42, 42, 12, 43, 43, 17, 1, 1, 32, 51, 52, 17, 30, 35, 17, 37, 3, 36, 36, 38, 1, 14, 12, 14, 12, 42, 42, 42, 43, 43, 10, 52, 32, 32, 51, 17, 3, 30, 14, 53, 37, 32, 48, 17, 39, 12, 51, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

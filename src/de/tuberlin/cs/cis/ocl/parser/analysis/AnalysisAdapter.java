/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.analysis;

import java.util.*;
import de.tuberlin.cs.cis.ocl.parser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOclFile(AOclFile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOclPackage(AOclPackage node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPackageName(APackageName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstraint(AConstraint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefinitionContextBodypart(ADefinitionContextBodypart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstraintContextBodypart(AConstraintContextBodypart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContextDeclaration(AContextDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperationContextKind(AOperationContextKind node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassifierContextKind(AClassifierContextKind node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnType(AReturnType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassifierType(AClassifierType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPreConditionStereotype(APreConditionStereotype node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostConditionStereotype(APostConditionStereotype node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInvariantStereotype(AInvariantStereotype node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContextOperationName(AContextOperationName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalContextOperationName(ALogicalContextOperationName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelationalContextOperationName(ARelationalContextOperationName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddContextOperationName(AAddContextOperationName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplyContextOperationName(AMultiplyContextOperationName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormalParameterList(AFormalParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParamList(AParamList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormalParameter(AFormalParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANextParam(ANextParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOclExpression(AOclExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALetDeclaration(ALetDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALetExpression(ALetExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALetParameterList(ALetParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypePostfix(ATypePostfix node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfExpression(AIfExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalExpression(ALogicalExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAImplication(AImplication node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanExpression(ABooleanExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanOperation(ABooleanOperation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelationalExpression(ARelationalExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEquation(AEquation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompareableExpression(ACompareableExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComparison(AComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditiveExpression(AAdditiveExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddition(AAddition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplicativeExpression(AMultiplicativeExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplication(AMultiplication node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrefixedUnaryExpression(APrefixedUnaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryExpression(AUnaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostfixExpression(APostfixExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAObjectPropertyInvocation(AObjectPropertyInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACollectionPropertyInvocation(ACollectionPropertyInvocation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACollectionPrimaryExpression(ACollectionPrimaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiteralPrimaryExpression(ALiteralPrimaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPropertyCallPrimaryExpression(APropertyCallPrimaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesedPrimaryExpression(AParenthesedPrimaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfPrimaryExpression(AIfPrimaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATimeExpression(ATimeExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPropertyCall(APropertyCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPropertyCallParameters(APropertyCallParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAActualParameterList(AActualParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANextExpr(ANextExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConcreteDeclarator(AConcreteDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAccumulator(AAccumulator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameList(ANameList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANextName(ANextName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleTypePostfix(ASimpleTypePostfix node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAQualifiers(AQualifiers node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalOperator(ALogicalOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAImplicativeLogicalOperator(AImplicativeLogicalOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndBooleanOperator(AAndBooleanOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrBooleanOperator(AOrBooleanOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXorBooleanOperator(AXorBooleanOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAImpliesOperator(AImpliesOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualityRelationalOperator(AEqualityRelationalOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompareRelationalOperator(ACompareRelationalOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEquationOperator(AEquationOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInEquationOperator(AInEquationOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtCompareOperator(AGtCompareOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtCompareOperator(ALtCompareOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGteqCompareOperator(AGteqCompareOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALteqCompareOperator(ALteqCompareOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusAddOperator(APlusAddOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusAddOperator(AMinusAddOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultMultiplyOperator(AMultMultiplyOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivMultiplyOperator(ADivMultiplyOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotUnaryOperator(ANotUnaryOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOclAnyTypeSpecifier(AOclAnyTypeSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACollectionTypeSpecifier(ACollectionTypeSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleTypeSpecifier(ASimpleTypeSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACollectionType(ACollectionType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASetCollectionKind(ASetCollectionKind node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABagCollectionKind(ABagCollectionKind node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASequenceCollectionKind(ASequenceCollectionKind node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACollectionKind(ACollectionKind node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiteralCollection(ALiteralCollection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACollectionItemList(ACollectionItemList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANextCollectionItem(ANextCollectionItem node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACollectionItem(ACollectionItem node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARange(ARange node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberLiteral(ANumberLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAName(AName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPathName(APathName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameQualifier(ANameQualifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndOfLineComment(TEndOfLineComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSet(TSet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBag(TBag node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSequence(TSequence node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCollection(TCollection node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContext(TContext node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPre(TPre node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPost(TPost node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInv(TInv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNEqual(TNEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImplies(TImplies node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDcolon(TDcolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAt(TAt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBar(TBar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDdot(TDdot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndif(TEndif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBooleanLiteral(TBooleanLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLet(TLet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPackage(TPackage node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndpackage(TEndpackage node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberLiteral(TNumberLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class ACompareRelationalOperator extends PRelationalOperator
{
    private PCompareOperator _compareOperator_;

    public ACompareRelationalOperator()
    {
        // Constructor
    }

    public ACompareRelationalOperator(
        @SuppressWarnings("hiding") PCompareOperator _compareOperator_)
    {
        // Constructor
        setCompareOperator(_compareOperator_);

    }

    @Override
    public Object clone()
    {
        return new ACompareRelationalOperator(
            cloneNode(this._compareOperator_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompareRelationalOperator(this);
    }

    public PCompareOperator getCompareOperator()
    {
        return this._compareOperator_;
    }

    public void setCompareOperator(PCompareOperator node)
    {
        if(this._compareOperator_ != null)
        {
            this._compareOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compareOperator_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._compareOperator_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._compareOperator_ == child)
        {
            this._compareOperator_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._compareOperator_ == oldChild)
        {
            setCompareOperator((PCompareOperator) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

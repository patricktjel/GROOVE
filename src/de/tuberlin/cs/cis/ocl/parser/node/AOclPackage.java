/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import java.util.*;
import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AOclPackage extends POclPackage
{
    private TPackage _package_;
    private PPackageName _packageName_;
    private final LinkedList<PConstraint> _constraint_ = new LinkedList<PConstraint>();
    private TEndpackage _endpackage_;

    public AOclPackage()
    {
        // Constructor
    }

    public AOclPackage(
        @SuppressWarnings("hiding") TPackage _package_,
        @SuppressWarnings("hiding") PPackageName _packageName_,
        @SuppressWarnings("hiding") List<?> _constraint_,
        @SuppressWarnings("hiding") TEndpackage _endpackage_)
    {
        // Constructor
        setPackage(_package_);

        setPackageName(_packageName_);

        setConstraint(_constraint_);

        setEndpackage(_endpackage_);

    }

    @Override
    public Object clone()
    {
        return new AOclPackage(
            cloneNode(this._package_),
            cloneNode(this._packageName_),
            cloneList(this._constraint_),
            cloneNode(this._endpackage_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOclPackage(this);
    }

    public TPackage getPackage()
    {
        return this._package_;
    }

    public void setPackage(TPackage node)
    {
        if(this._package_ != null)
        {
            this._package_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._package_ = node;
    }

    public PPackageName getPackageName()
    {
        return this._packageName_;
    }

    public void setPackageName(PPackageName node)
    {
        if(this._packageName_ != null)
        {
            this._packageName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._packageName_ = node;
    }

    public LinkedList<PConstraint> getConstraint()
    {
        return this._constraint_;
    }

    public void setConstraint(List<?> list)
    {
        for(PConstraint e : this._constraint_)
        {
            e.parent(null);
        }
        this._constraint_.clear();

        for(Object obj_e : list)
        {
            PConstraint e = (PConstraint) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._constraint_.add(e);
        }
    }

    public TEndpackage getEndpackage()
    {
        return this._endpackage_;
    }

    public void setEndpackage(TEndpackage node)
    {
        if(this._endpackage_ != null)
        {
            this._endpackage_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endpackage_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._package_)
            + toString(this._packageName_)
            + toString(this._constraint_)
            + toString(this._endpackage_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._package_ == child)
        {
            this._package_ = null;
            return;
        }

        if(this._packageName_ == child)
        {
            this._packageName_ = null;
            return;
        }

        if(this._constraint_.remove(child))
        {
            return;
        }

        if(this._endpackage_ == child)
        {
            this._endpackage_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._package_ == oldChild)
        {
            setPackage((TPackage) newChild);
            return;
        }

        if(this._packageName_ == oldChild)
        {
            setPackageName((PPackageName) newChild);
            return;
        }

        for(ListIterator<PConstraint> i = this._constraint_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PConstraint) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endpackage_ == oldChild)
        {
            setEndpackage((TEndpackage) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

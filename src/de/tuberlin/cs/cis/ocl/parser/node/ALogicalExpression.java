/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import java.util.*;
import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class ALogicalExpression extends PLogicalExpression
{
    private PBooleanExpression _booleanExpression_;
    private final LinkedList<PImplication> _implication_ = new LinkedList<PImplication>();

    public ALogicalExpression()
    {
        // Constructor
    }

    public ALogicalExpression(
        @SuppressWarnings("hiding") PBooleanExpression _booleanExpression_,
        @SuppressWarnings("hiding") List<?> _implication_)
    {
        // Constructor
        setBooleanExpression(_booleanExpression_);

        setImplication(_implication_);

    }

    @Override
    public Object clone()
    {
        return new ALogicalExpression(
            cloneNode(this._booleanExpression_),
            cloneList(this._implication_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALogicalExpression(this);
    }

    public PBooleanExpression getBooleanExpression()
    {
        return this._booleanExpression_;
    }

    public void setBooleanExpression(PBooleanExpression node)
    {
        if(this._booleanExpression_ != null)
        {
            this._booleanExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._booleanExpression_ = node;
    }

    public LinkedList<PImplication> getImplication()
    {
        return this._implication_;
    }

    public void setImplication(List<?> list)
    {
        for(PImplication e : this._implication_)
        {
            e.parent(null);
        }
        this._implication_.clear();

        for(Object obj_e : list)
        {
            PImplication e = (PImplication) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._implication_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._booleanExpression_)
            + toString(this._implication_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._booleanExpression_ == child)
        {
            this._booleanExpression_ = null;
            return;
        }

        if(this._implication_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._booleanExpression_ == oldChild)
        {
            setBooleanExpression((PBooleanExpression) newChild);
            return;
        }

        for(ListIterator<PImplication> i = this._implication_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PImplication) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

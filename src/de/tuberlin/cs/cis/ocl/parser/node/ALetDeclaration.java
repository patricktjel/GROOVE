/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import java.util.*;
import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class ALetDeclaration extends PLetDeclaration
{
    private final LinkedList<PLetExpression> _letExpression_ = new LinkedList<PLetExpression>();
    private TIn _in_;

    public ALetDeclaration()
    {
        // Constructor
    }

    public ALetDeclaration(
        @SuppressWarnings("hiding") List<?> _letExpression_,
        @SuppressWarnings("hiding") TIn _in_)
    {
        // Constructor
        setLetExpression(_letExpression_);

        setIn(_in_);

    }

    @Override
    public Object clone()
    {
        return new ALetDeclaration(
            cloneList(this._letExpression_),
            cloneNode(this._in_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALetDeclaration(this);
    }

    public LinkedList<PLetExpression> getLetExpression()
    {
        return this._letExpression_;
    }

    public void setLetExpression(List<?> list)
    {
        for(PLetExpression e : this._letExpression_)
        {
            e.parent(null);
        }
        this._letExpression_.clear();

        for(Object obj_e : list)
        {
            PLetExpression e = (PLetExpression) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._letExpression_.add(e);
        }
    }

    public TIn getIn()
    {
        return this._in_;
    }

    public void setIn(TIn node)
    {
        if(this._in_ != null)
        {
            this._in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._in_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._letExpression_)
            + toString(this._in_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._letExpression_.remove(child))
        {
            return;
        }

        if(this._in_ == child)
        {
            this._in_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PLetExpression> i = this._letExpression_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLetExpression) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

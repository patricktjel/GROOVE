/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class APropertyCallParameters extends PPropertyCallParameters
{
    private TLPar _lPar_;
    private PDeclarator _declarator_;
    private PActualParameterList _actualParameterList_;
    private TRPar _rPar_;

    public APropertyCallParameters()
    {
        // Constructor
    }

    public APropertyCallParameters(
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PDeclarator _declarator_,
        @SuppressWarnings("hiding") PActualParameterList _actualParameterList_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setLPar(_lPar_);

        setDeclarator(_declarator_);

        setActualParameterList(_actualParameterList_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new APropertyCallParameters(
            cloneNode(this._lPar_),
            cloneNode(this._declarator_),
            cloneNode(this._actualParameterList_),
            cloneNode(this._rPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPropertyCallParameters(this);
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PDeclarator getDeclarator()
    {
        return this._declarator_;
    }

    public void setDeclarator(PDeclarator node)
    {
        if(this._declarator_ != null)
        {
            this._declarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._declarator_ = node;
    }

    public PActualParameterList getActualParameterList()
    {
        return this._actualParameterList_;
    }

    public void setActualParameterList(PActualParameterList node)
    {
        if(this._actualParameterList_ != null)
        {
            this._actualParameterList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._actualParameterList_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lPar_)
            + toString(this._declarator_)
            + toString(this._actualParameterList_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._declarator_ == child)
        {
            this._declarator_ = null;
            return;
        }

        if(this._actualParameterList_ == child)
        {
            this._actualParameterList_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._declarator_ == oldChild)
        {
            setDeclarator((PDeclarator) newChild);
            return;
        }

        if(this._actualParameterList_ == oldChild)
        {
            setActualParameterList((PActualParameterList) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import java.util.*;
import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class ABooleanExpression extends PBooleanExpression
{
    private PRelationalExpression _relationalExpression_;
    private final LinkedList<PBooleanOperation> _booleanOperation_ = new LinkedList<PBooleanOperation>();

    public ABooleanExpression()
    {
        // Constructor
    }

    public ABooleanExpression(
        @SuppressWarnings("hiding") PRelationalExpression _relationalExpression_,
        @SuppressWarnings("hiding") List<?> _booleanOperation_)
    {
        // Constructor
        setRelationalExpression(_relationalExpression_);

        setBooleanOperation(_booleanOperation_);

    }

    @Override
    public Object clone()
    {
        return new ABooleanExpression(
            cloneNode(this._relationalExpression_),
            cloneList(this._booleanOperation_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABooleanExpression(this);
    }

    public PRelationalExpression getRelationalExpression()
    {
        return this._relationalExpression_;
    }

    public void setRelationalExpression(PRelationalExpression node)
    {
        if(this._relationalExpression_ != null)
        {
            this._relationalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relationalExpression_ = node;
    }

    public LinkedList<PBooleanOperation> getBooleanOperation()
    {
        return this._booleanOperation_;
    }

    public void setBooleanOperation(List<?> list)
    {
        for(PBooleanOperation e : this._booleanOperation_)
        {
            e.parent(null);
        }
        this._booleanOperation_.clear();

        for(Object obj_e : list)
        {
            PBooleanOperation e = (PBooleanOperation) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._booleanOperation_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._relationalExpression_)
            + toString(this._booleanOperation_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._relationalExpression_ == child)
        {
            this._relationalExpression_ = null;
            return;
        }

        if(this._booleanOperation_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._relationalExpression_ == oldChild)
        {
            setRelationalExpression((PRelationalExpression) newChild);
            return;
        }

        for(ListIterator<PBooleanOperation> i = this._booleanOperation_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PBooleanOperation) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

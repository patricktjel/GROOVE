/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class ALetExpression extends PLetExpression
{
    private TLet _let_;
    private PName _name_;
    private PLetParameterList _letParameterList_;
    private PTypePostfix _typePostfix_;
    private TEqual _equal_;
    private PExpression _expression_;

    public ALetExpression()
    {
        // Constructor
    }

    public ALetExpression(
        @SuppressWarnings("hiding") TLet _let_,
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") PLetParameterList _letParameterList_,
        @SuppressWarnings("hiding") PTypePostfix _typePostfix_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") PExpression _expression_)
    {
        // Constructor
        setLet(_let_);

        setName(_name_);

        setLetParameterList(_letParameterList_);

        setTypePostfix(_typePostfix_);

        setEqual(_equal_);

        setExpression(_expression_);

    }

    @Override
    public Object clone()
    {
        return new ALetExpression(
            cloneNode(this._let_),
            cloneNode(this._name_),
            cloneNode(this._letParameterList_),
            cloneNode(this._typePostfix_),
            cloneNode(this._equal_),
            cloneNode(this._expression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALetExpression(this);
    }

    public TLet getLet()
    {
        return this._let_;
    }

    public void setLet(TLet node)
    {
        if(this._let_ != null)
        {
            this._let_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._let_ = node;
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PLetParameterList getLetParameterList()
    {
        return this._letParameterList_;
    }

    public void setLetParameterList(PLetParameterList node)
    {
        if(this._letParameterList_ != null)
        {
            this._letParameterList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._letParameterList_ = node;
    }

    public PTypePostfix getTypePostfix()
    {
        return this._typePostfix_;
    }

    public void setTypePostfix(PTypePostfix node)
    {
        if(this._typePostfix_ != null)
        {
            this._typePostfix_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typePostfix_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._let_)
            + toString(this._name_)
            + toString(this._letParameterList_)
            + toString(this._typePostfix_)
            + toString(this._equal_)
            + toString(this._expression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._let_ == child)
        {
            this._let_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._letParameterList_ == child)
        {
            this._letParameterList_ = null;
            return;
        }

        if(this._typePostfix_ == child)
        {
            this._typePostfix_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._let_ == oldChild)
        {
            setLet((TLet) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._letParameterList_ == oldChild)
        {
            setLetParameterList((PLetParameterList) newChild);
            return;
        }

        if(this._typePostfix_ == oldChild)
        {
            setTypePostfix((PTypePostfix) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

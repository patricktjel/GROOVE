/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AConcreteDeclarator extends PDeclarator
{
    private PActualParameterList _actualParameterList_;
    private PSimpleTypePostfix _simpleTypePostfix_;
    private PAccumulator _accumulator_;
    private TBar _bar_;

    public AConcreteDeclarator()
    {
        // Constructor
    }

    public AConcreteDeclarator(
        @SuppressWarnings("hiding") PActualParameterList _actualParameterList_,
        @SuppressWarnings("hiding") PSimpleTypePostfix _simpleTypePostfix_,
        @SuppressWarnings("hiding") PAccumulator _accumulator_,
        @SuppressWarnings("hiding") TBar _bar_)
    {
        // Constructor
        setActualParameterList(_actualParameterList_);

        setSimpleTypePostfix(_simpleTypePostfix_);

        setAccumulator(_accumulator_);

        setBar(_bar_);

    }

    @Override
    public Object clone()
    {
        return new AConcreteDeclarator(
            cloneNode(this._actualParameterList_),
            cloneNode(this._simpleTypePostfix_),
            cloneNode(this._accumulator_),
            cloneNode(this._bar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConcreteDeclarator(this);
    }

    public PActualParameterList getActualParameterList()
    {
        return this._actualParameterList_;
    }

    public void setActualParameterList(PActualParameterList node)
    {
        if(this._actualParameterList_ != null)
        {
            this._actualParameterList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._actualParameterList_ = node;
    }

    public PSimpleTypePostfix getSimpleTypePostfix()
    {
        return this._simpleTypePostfix_;
    }

    public void setSimpleTypePostfix(PSimpleTypePostfix node)
    {
        if(this._simpleTypePostfix_ != null)
        {
            this._simpleTypePostfix_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleTypePostfix_ = node;
    }

    public PAccumulator getAccumulator()
    {
        return this._accumulator_;
    }

    public void setAccumulator(PAccumulator node)
    {
        if(this._accumulator_ != null)
        {
            this._accumulator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accumulator_ = node;
    }

    public TBar getBar()
    {
        return this._bar_;
    }

    public void setBar(TBar node)
    {
        if(this._bar_ != null)
        {
            this._bar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._actualParameterList_)
            + toString(this._simpleTypePostfix_)
            + toString(this._accumulator_)
            + toString(this._bar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._actualParameterList_ == child)
        {
            this._actualParameterList_ = null;
            return;
        }

        if(this._simpleTypePostfix_ == child)
        {
            this._simpleTypePostfix_ = null;
            return;
        }

        if(this._accumulator_ == child)
        {
            this._accumulator_ = null;
            return;
        }

        if(this._bar_ == child)
        {
            this._bar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._actualParameterList_ == oldChild)
        {
            setActualParameterList((PActualParameterList) newChild);
            return;
        }

        if(this._simpleTypePostfix_ == oldChild)
        {
            setSimpleTypePostfix((PSimpleTypePostfix) newChild);
            return;
        }

        if(this._accumulator_ == oldChild)
        {
            setAccumulator((PAccumulator) newChild);
            return;
        }

        if(this._bar_ == oldChild)
        {
            setBar((TBar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

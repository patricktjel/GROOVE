/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class ATypePostfix extends PTypePostfix
{
    private TColon _colon_;
    private PTypeSpecifier _typeSpecifier_;

    public ATypePostfix()
    {
        // Constructor
    }

    public ATypePostfix(
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PTypeSpecifier _typeSpecifier_)
    {
        // Constructor
        setColon(_colon_);

        setTypeSpecifier(_typeSpecifier_);

    }

    @Override
    public Object clone()
    {
        return new ATypePostfix(
            cloneNode(this._colon_),
            cloneNode(this._typeSpecifier_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATypePostfix(this);
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PTypeSpecifier getTypeSpecifier()
    {
        return this._typeSpecifier_;
    }

    public void setTypeSpecifier(PTypeSpecifier node)
    {
        if(this._typeSpecifier_ != null)
        {
            this._typeSpecifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeSpecifier_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._colon_)
            + toString(this._typeSpecifier_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._typeSpecifier_ == child)
        {
            this._typeSpecifier_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._typeSpecifier_ == oldChild)
        {
            setTypeSpecifier((PTypeSpecifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

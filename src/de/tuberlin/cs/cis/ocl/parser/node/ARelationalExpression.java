/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class ARelationalExpression extends PRelationalExpression
{
    private PCompareableExpression _compareableExpression_;
    private PEquation _equation_;

    public ARelationalExpression()
    {
        // Constructor
    }

    public ARelationalExpression(
        @SuppressWarnings("hiding") PCompareableExpression _compareableExpression_,
        @SuppressWarnings("hiding") PEquation _equation_)
    {
        // Constructor
        setCompareableExpression(_compareableExpression_);

        setEquation(_equation_);

    }

    @Override
    public Object clone()
    {
        return new ARelationalExpression(
            cloneNode(this._compareableExpression_),
            cloneNode(this._equation_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARelationalExpression(this);
    }

    public PCompareableExpression getCompareableExpression()
    {
        return this._compareableExpression_;
    }

    public void setCompareableExpression(PCompareableExpression node)
    {
        if(this._compareableExpression_ != null)
        {
            this._compareableExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compareableExpression_ = node;
    }

    public PEquation getEquation()
    {
        return this._equation_;
    }

    public void setEquation(PEquation node)
    {
        if(this._equation_ != null)
        {
            this._equation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equation_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._compareableExpression_)
            + toString(this._equation_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._compareableExpression_ == child)
        {
            this._compareableExpression_ = null;
            return;
        }

        if(this._equation_ == child)
        {
            this._equation_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._compareableExpression_ == oldChild)
        {
            setCompareableExpression((PCompareableExpression) newChild);
            return;
        }

        if(this._equation_ == oldChild)
        {
            setEquation((PEquation) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

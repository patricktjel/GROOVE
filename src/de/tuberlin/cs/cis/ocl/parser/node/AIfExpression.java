/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AIfExpression extends PIfExpression
{
    private TIf _if_;
    private PExpression _condition_;
    private TThen _then_;
    private PExpression _thenBranch_;
    private TElse _else_;
    private PExpression _elseBranch_;
    private TEndif _endif_;

    public AIfExpression()
    {
        // Constructor
    }

    public AIfExpression(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExpression _condition_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PExpression _thenBranch_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PExpression _elseBranch_,
        @SuppressWarnings("hiding") TEndif _endif_)
    {
        // Constructor
        setIf(_if_);

        setCondition(_condition_);

        setThen(_then_);

        setThenBranch(_thenBranch_);

        setElse(_else_);

        setElseBranch(_elseBranch_);

        setEndif(_endif_);

    }

    @Override
    public Object clone()
    {
        return new AIfExpression(
            cloneNode(this._if_),
            cloneNode(this._condition_),
            cloneNode(this._then_),
            cloneNode(this._thenBranch_),
            cloneNode(this._else_),
            cloneNode(this._elseBranch_),
            cloneNode(this._endif_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfExpression(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExpression getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PExpression node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PExpression getThenBranch()
    {
        return this._thenBranch_;
    }

    public void setThenBranch(PExpression node)
    {
        if(this._thenBranch_ != null)
        {
            this._thenBranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenBranch_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PExpression getElseBranch()
    {
        return this._elseBranch_;
    }

    public void setElseBranch(PExpression node)
    {
        if(this._elseBranch_ != null)
        {
            this._elseBranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseBranch_ = node;
    }

    public TEndif getEndif()
    {
        return this._endif_;
    }

    public void setEndif(TEndif node)
    {
        if(this._endif_ != null)
        {
            this._endif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endif_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._condition_)
            + toString(this._then_)
            + toString(this._thenBranch_)
            + toString(this._else_)
            + toString(this._elseBranch_)
            + toString(this._endif_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._thenBranch_ == child)
        {
            this._thenBranch_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._elseBranch_ == child)
        {
            this._elseBranch_ = null;
            return;
        }

        if(this._endif_ == child)
        {
            this._endif_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._condition_ == oldChild)
        {
            setCondition((PExpression) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._thenBranch_ == oldChild)
        {
            setThenBranch((PExpression) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._elseBranch_ == oldChild)
        {
            setElseBranch((PExpression) newChild);
            return;
        }

        if(this._endif_ == oldChild)
        {
            setEndif((TEndif) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

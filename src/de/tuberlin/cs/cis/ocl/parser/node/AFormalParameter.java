/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFormalParameter extends PFormalParameter
{
    private PName _name_;
    private PTypePostfix _typePostfix_;

    public AFormalParameter()
    {
        // Constructor
    }

    public AFormalParameter(
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") PTypePostfix _typePostfix_)
    {
        // Constructor
        setName(_name_);

        setTypePostfix(_typePostfix_);

    }

    @Override
    public Object clone()
    {
        return new AFormalParameter(
            cloneNode(this._name_),
            cloneNode(this._typePostfix_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFormalParameter(this);
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PTypePostfix getTypePostfix()
    {
        return this._typePostfix_;
    }

    public void setTypePostfix(PTypePostfix node)
    {
        if(this._typePostfix_ != null)
        {
            this._typePostfix_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typePostfix_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._typePostfix_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._typePostfix_ == child)
        {
            this._typePostfix_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._typePostfix_ == oldChild)
        {
            setTypePostfix((PTypePostfix) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

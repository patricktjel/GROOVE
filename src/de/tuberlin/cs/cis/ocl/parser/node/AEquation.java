/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AEquation extends PEquation
{
    private PEquationOperator _equationOperator_;
    private PCompareableExpression _compareableExpression_;

    public AEquation()
    {
        // Constructor
    }

    public AEquation(
        @SuppressWarnings("hiding") PEquationOperator _equationOperator_,
        @SuppressWarnings("hiding") PCompareableExpression _compareableExpression_)
    {
        // Constructor
        setEquationOperator(_equationOperator_);

        setCompareableExpression(_compareableExpression_);

    }

    @Override
    public Object clone()
    {
        return new AEquation(
            cloneNode(this._equationOperator_),
            cloneNode(this._compareableExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEquation(this);
    }

    public PEquationOperator getEquationOperator()
    {
        return this._equationOperator_;
    }

    public void setEquationOperator(PEquationOperator node)
    {
        if(this._equationOperator_ != null)
        {
            this._equationOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equationOperator_ = node;
    }

    public PCompareableExpression getCompareableExpression()
    {
        return this._compareableExpression_;
    }

    public void setCompareableExpression(PCompareableExpression node)
    {
        if(this._compareableExpression_ != null)
        {
            this._compareableExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compareableExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._equationOperator_)
            + toString(this._compareableExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._equationOperator_ == child)
        {
            this._equationOperator_ = null;
            return;
        }

        if(this._compareableExpression_ == child)
        {
            this._compareableExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._equationOperator_ == oldChild)
        {
            setEquationOperator((PEquationOperator) newChild);
            return;
        }

        if(this._compareableExpression_ == oldChild)
        {
            setCompareableExpression((PCompareableExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import java.util.*;
import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AConstraint extends PConstraint
{
    private PContextDeclaration _contextDeclaration_;
    private final LinkedList<PContextBodypart> _contextBodypart_ = new LinkedList<PContextBodypart>();

    public AConstraint()
    {
        // Constructor
    }

    public AConstraint(
        @SuppressWarnings("hiding") PContextDeclaration _contextDeclaration_,
        @SuppressWarnings("hiding") List<?> _contextBodypart_)
    {
        // Constructor
        setContextDeclaration(_contextDeclaration_);

        setContextBodypart(_contextBodypart_);

    }

    @Override
    public Object clone()
    {
        return new AConstraint(
            cloneNode(this._contextDeclaration_),
            cloneList(this._contextBodypart_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstraint(this);
    }

    public PContextDeclaration getContextDeclaration()
    {
        return this._contextDeclaration_;
    }

    public void setContextDeclaration(PContextDeclaration node)
    {
        if(this._contextDeclaration_ != null)
        {
            this._contextDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._contextDeclaration_ = node;
    }

    public LinkedList<PContextBodypart> getContextBodypart()
    {
        return this._contextBodypart_;
    }

    public void setContextBodypart(List<?> list)
    {
        for(PContextBodypart e : this._contextBodypart_)
        {
            e.parent(null);
        }
        this._contextBodypart_.clear();

        for(Object obj_e : list)
        {
            PContextBodypart e = (PContextBodypart) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._contextBodypart_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._contextDeclaration_)
            + toString(this._contextBodypart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._contextDeclaration_ == child)
        {
            this._contextDeclaration_ = null;
            return;
        }

        if(this._contextBodypart_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._contextDeclaration_ == oldChild)
        {
            setContextDeclaration((PContextDeclaration) newChild);
            return;
        }

        for(ListIterator<PContextBodypart> i = this._contextBodypart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PContextBodypart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

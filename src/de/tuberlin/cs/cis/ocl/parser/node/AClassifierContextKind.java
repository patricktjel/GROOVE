/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AClassifierContextKind extends PContextKind
{
    private PName _name_;
    private PClassifierType _classifierType_;

    public AClassifierContextKind()
    {
        // Constructor
    }

    public AClassifierContextKind(
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") PClassifierType _classifierType_)
    {
        // Constructor
        setName(_name_);

        setClassifierType(_classifierType_);

    }

    @Override
    public Object clone()
    {
        return new AClassifierContextKind(
            cloneNode(this._name_),
            cloneNode(this._classifierType_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassifierContextKind(this);
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PClassifierType getClassifierType()
    {
        return this._classifierType_;
    }

    public void setClassifierType(PClassifierType node)
    {
        if(this._classifierType_ != null)
        {
            this._classifierType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classifierType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._classifierType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._classifierType_ == child)
        {
            this._classifierType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._classifierType_ == oldChild)
        {
            setClassifierType((PClassifierType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

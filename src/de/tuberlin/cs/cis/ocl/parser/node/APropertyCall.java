/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class APropertyCall extends PPropertyCall
{
    private PPathName _pathName_;
    private PTimeExpression _timeExpression_;
    private PQualifiers _qualifiers_;
    private PPropertyCallParameters _propertyCallParameters_;

    public APropertyCall()
    {
        // Constructor
    }

    public APropertyCall(
        @SuppressWarnings("hiding") PPathName _pathName_,
        @SuppressWarnings("hiding") PTimeExpression _timeExpression_,
        @SuppressWarnings("hiding") PQualifiers _qualifiers_,
        @SuppressWarnings("hiding") PPropertyCallParameters _propertyCallParameters_)
    {
        // Constructor
        setPathName(_pathName_);

        setTimeExpression(_timeExpression_);

        setQualifiers(_qualifiers_);

        setPropertyCallParameters(_propertyCallParameters_);

    }

    @Override
    public Object clone()
    {
        return new APropertyCall(
            cloneNode(this._pathName_),
            cloneNode(this._timeExpression_),
            cloneNode(this._qualifiers_),
            cloneNode(this._propertyCallParameters_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPropertyCall(this);
    }

    public PPathName getPathName()
    {
        return this._pathName_;
    }

    public void setPathName(PPathName node)
    {
        if(this._pathName_ != null)
        {
            this._pathName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pathName_ = node;
    }

    public PTimeExpression getTimeExpression()
    {
        return this._timeExpression_;
    }

    public void setTimeExpression(PTimeExpression node)
    {
        if(this._timeExpression_ != null)
        {
            this._timeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._timeExpression_ = node;
    }

    public PQualifiers getQualifiers()
    {
        return this._qualifiers_;
    }

    public void setQualifiers(PQualifiers node)
    {
        if(this._qualifiers_ != null)
        {
            this._qualifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._qualifiers_ = node;
    }

    public PPropertyCallParameters getPropertyCallParameters()
    {
        return this._propertyCallParameters_;
    }

    public void setPropertyCallParameters(PPropertyCallParameters node)
    {
        if(this._propertyCallParameters_ != null)
        {
            this._propertyCallParameters_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._propertyCallParameters_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pathName_)
            + toString(this._timeExpression_)
            + toString(this._qualifiers_)
            + toString(this._propertyCallParameters_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pathName_ == child)
        {
            this._pathName_ = null;
            return;
        }

        if(this._timeExpression_ == child)
        {
            this._timeExpression_ = null;
            return;
        }

        if(this._qualifiers_ == child)
        {
            this._qualifiers_ = null;
            return;
        }

        if(this._propertyCallParameters_ == child)
        {
            this._propertyCallParameters_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pathName_ == oldChild)
        {
            setPathName((PPathName) newChild);
            return;
        }

        if(this._timeExpression_ == oldChild)
        {
            setTimeExpression((PTimeExpression) newChild);
            return;
        }

        if(this._qualifiers_ == oldChild)
        {
            setQualifiers((PQualifiers) newChild);
            return;
        }

        if(this._propertyCallParameters_ == oldChild)
        {
            setPropertyCallParameters((PPropertyCallParameters) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AConstraintContextBodypart extends PContextBodypart
{
    private PStereotype _stereotype_;
    private PName _name_;
    private TColon _colon_;
    private POclExpression _oclExpression_;

    public AConstraintContextBodypart()
    {
        // Constructor
    }

    public AConstraintContextBodypart(
        @SuppressWarnings("hiding") PStereotype _stereotype_,
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") POclExpression _oclExpression_)
    {
        // Constructor
        setStereotype(_stereotype_);

        setName(_name_);

        setColon(_colon_);

        setOclExpression(_oclExpression_);

    }

    @Override
    public Object clone()
    {
        return new AConstraintContextBodypart(
            cloneNode(this._stereotype_),
            cloneNode(this._name_),
            cloneNode(this._colon_),
            cloneNode(this._oclExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstraintContextBodypart(this);
    }

    public PStereotype getStereotype()
    {
        return this._stereotype_;
    }

    public void setStereotype(PStereotype node)
    {
        if(this._stereotype_ != null)
        {
            this._stereotype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stereotype_ = node;
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public POclExpression getOclExpression()
    {
        return this._oclExpression_;
    }

    public void setOclExpression(POclExpression node)
    {
        if(this._oclExpression_ != null)
        {
            this._oclExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._oclExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stereotype_)
            + toString(this._name_)
            + toString(this._colon_)
            + toString(this._oclExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stereotype_ == child)
        {
            this._stereotype_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._oclExpression_ == child)
        {
            this._oclExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._stereotype_ == oldChild)
        {
            setStereotype((PStereotype) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._oclExpression_ == oldChild)
        {
            setOclExpression((POclExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

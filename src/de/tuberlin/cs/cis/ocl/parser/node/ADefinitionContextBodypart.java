/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import java.util.*;
import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class ADefinitionContextBodypart extends PContextBodypart
{
    private TDef _def_;
    private PName _name_;
    private TColon _colon_;
    private final LinkedList<PLetExpression> _letExpression_ = new LinkedList<PLetExpression>();

    public ADefinitionContextBodypart()
    {
        // Constructor
    }

    public ADefinitionContextBodypart(
        @SuppressWarnings("hiding") TDef _def_,
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") List<?> _letExpression_)
    {
        // Constructor
        setDef(_def_);

        setName(_name_);

        setColon(_colon_);

        setLetExpression(_letExpression_);

    }

    @Override
    public Object clone()
    {
        return new ADefinitionContextBodypart(
            cloneNode(this._def_),
            cloneNode(this._name_),
            cloneNode(this._colon_),
            cloneList(this._letExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADefinitionContextBodypart(this);
    }

    public TDef getDef()
    {
        return this._def_;
    }

    public void setDef(TDef node)
    {
        if(this._def_ != null)
        {
            this._def_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._def_ = node;
    }

    public PName getName()
    {
        return this._name_;
    }

    public void setName(PName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public LinkedList<PLetExpression> getLetExpression()
    {
        return this._letExpression_;
    }

    public void setLetExpression(List<?> list)
    {
        for(PLetExpression e : this._letExpression_)
        {
            e.parent(null);
        }
        this._letExpression_.clear();

        for(Object obj_e : list)
        {
            PLetExpression e = (PLetExpression) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._letExpression_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._def_)
            + toString(this._name_)
            + toString(this._colon_)
            + toString(this._letExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._def_ == child)
        {
            this._def_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._letExpression_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._def_ == oldChild)
        {
            setDef((TDef) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        for(ListIterator<PLetExpression> i = this._letExpression_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLetExpression) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

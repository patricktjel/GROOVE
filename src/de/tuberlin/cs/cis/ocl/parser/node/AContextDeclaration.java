/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AContextDeclaration extends PContextDeclaration
{
    private TContext _context_;
    private PContextKind _contextKind_;

    public AContextDeclaration()
    {
        // Constructor
    }

    public AContextDeclaration(
        @SuppressWarnings("hiding") TContext _context_,
        @SuppressWarnings("hiding") PContextKind _contextKind_)
    {
        // Constructor
        setContext(_context_);

        setContextKind(_contextKind_);

    }

    @Override
    public Object clone()
    {
        return new AContextDeclaration(
            cloneNode(this._context_),
            cloneNode(this._contextKind_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAContextDeclaration(this);
    }

    public TContext getContext()
    {
        return this._context_;
    }

    public void setContext(TContext node)
    {
        if(this._context_ != null)
        {
            this._context_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._context_ = node;
    }

    public PContextKind getContextKind()
    {
        return this._contextKind_;
    }

    public void setContextKind(PContextKind node)
    {
        if(this._contextKind_ != null)
        {
            this._contextKind_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._contextKind_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._context_)
            + toString(this._contextKind_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._context_ == child)
        {
            this._context_ = null;
            return;
        }

        if(this._contextKind_ == child)
        {
            this._contextKind_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._context_ == oldChild)
        {
            setContext((TContext) newChild);
            return;
        }

        if(this._contextKind_ == oldChild)
        {
            setContextKind((PContextKind) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

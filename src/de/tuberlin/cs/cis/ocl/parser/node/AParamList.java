/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import java.util.*;
import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AParamList extends PParamList
{
    private PFormalParameter _formalParameter_;
    private final LinkedList<PNextParam> _nextParam_ = new LinkedList<PNextParam>();

    public AParamList()
    {
        // Constructor
    }

    public AParamList(
        @SuppressWarnings("hiding") PFormalParameter _formalParameter_,
        @SuppressWarnings("hiding") List<?> _nextParam_)
    {
        // Constructor
        setFormalParameter(_formalParameter_);

        setNextParam(_nextParam_);

    }

    @Override
    public Object clone()
    {
        return new AParamList(
            cloneNode(this._formalParameter_),
            cloneList(this._nextParam_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParamList(this);
    }

    public PFormalParameter getFormalParameter()
    {
        return this._formalParameter_;
    }

    public void setFormalParameter(PFormalParameter node)
    {
        if(this._formalParameter_ != null)
        {
            this._formalParameter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalParameter_ = node;
    }

    public LinkedList<PNextParam> getNextParam()
    {
        return this._nextParam_;
    }

    public void setNextParam(List<?> list)
    {
        for(PNextParam e : this._nextParam_)
        {
            e.parent(null);
        }
        this._nextParam_.clear();

        for(Object obj_e : list)
        {
            PNextParam e = (PNextParam) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._nextParam_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._formalParameter_)
            + toString(this._nextParam_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._formalParameter_ == child)
        {
            this._formalParameter_ = null;
            return;
        }

        if(this._nextParam_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._formalParameter_ == oldChild)
        {
            setFormalParameter((PFormalParameter) newChild);
            return;
        }

        for(ListIterator<PNextParam> i = this._nextParam_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNextParam) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.tuberlin.cs.cis.ocl.parser.node;

import de.tuberlin.cs.cis.ocl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AAddition extends PAddition
{
    private PAddOperator _addOperator_;
    private PMultiplicativeExpression _multiplicativeExpression_;

    public AAddition()
    {
        // Constructor
    }

    public AAddition(
        @SuppressWarnings("hiding") PAddOperator _addOperator_,
        @SuppressWarnings("hiding") PMultiplicativeExpression _multiplicativeExpression_)
    {
        // Constructor
        setAddOperator(_addOperator_);

        setMultiplicativeExpression(_multiplicativeExpression_);

    }

    @Override
    public Object clone()
    {
        return new AAddition(
            cloneNode(this._addOperator_),
            cloneNode(this._multiplicativeExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAddition(this);
    }

    public PAddOperator getAddOperator()
    {
        return this._addOperator_;
    }

    public void setAddOperator(PAddOperator node)
    {
        if(this._addOperator_ != null)
        {
            this._addOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._addOperator_ = node;
    }

    public PMultiplicativeExpression getMultiplicativeExpression()
    {
        return this._multiplicativeExpression_;
    }

    public void setMultiplicativeExpression(PMultiplicativeExpression node)
    {
        if(this._multiplicativeExpression_ != null)
        {
            this._multiplicativeExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplicativeExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._addOperator_)
            + toString(this._multiplicativeExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._addOperator_ == child)
        {
            this._addOperator_ = null;
            return;
        }

        if(this._multiplicativeExpression_ == child)
        {
            this._multiplicativeExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._addOperator_ == oldChild)
        {
            setAddOperator((PAddOperator) newChild);
            return;
        }

        if(this._multiplicativeExpression_ == oldChild)
        {
            setMultiplicativeExpression((PMultiplicativeExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
